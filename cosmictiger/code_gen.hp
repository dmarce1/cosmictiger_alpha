#pragma once


template<class T>
CUDA_EXPORT
inline int direct_greens_function(tensor_trless_sym<T, 6>& D, array<T, NDIM> X) {
	auto r2 = sqr(X[0], X[1], X[2]);
	constexpr float scale = 837.0f;
	X[0] *= scale;
	X[1] *= scale;
	X[2] *= scale;
	const T x000 = T(1);
	const T& x100 = X[0];
	const T& x010 = X[1];
	const T& x001 = X[2];
	const T x002 = x001 * x001;
	const T x011 = x010 * x001;
	const T x020 = x010 * x010;
	const T x101 = x100 * x001;
	const T x110 = x100 * x010;
	const T x200 = x100 * x100;
	const T x003 = x002 * x001;
	const T x012 = x011 * x001;
	const T x021 = x011 * x010;
	const T x030 = x020 * x010;
	const T x102 = x101 * x001;
	const T x111 = x110 * x001;
	const T x120 = x110 * x010;
	const T x201 = x101 * x100;
	const T x210 = x110 * x100;
	const T x300 = x200 * x100;
	const T x004 = x002 * x002;
	const T x013 = x011 * x002;
	const T x022 = x011 * x011;
	const T x031 = x011 * x020;
	const T x040 = x020 * x020;
	const T x103 = x101 * x002;
	const T x112 = x110 * x002;
	const T x121 = x110 * x011;
	const T x130 = x110 * x020;
	const T x202 = x101 * x101;
	const T x211 = x110 * x101;
	const T x220 = x110 * x110;
	const T x301 = x101 * x200;
	const T x310 = x110 * x200;
	const T x400 = x200 * x200;
	const T x005 = x003 * x002;
	const T x014 = x012 * x002;
	const T x023 = x021 * x002;
	const T x032 = x021 * x011;
	const T x041 = x021 * x020;
	const T x050 = x030 * x020;
	const T x104 = x102 * x002;
	const T x113 = x111 * x002;
	const T x122 = x111 * x011;
	const T x131 = x111 * x020;
	const T x140 = x120 * x020;
	const T x203 = x201 * x002;
	const T x212 = x111 * x101;
	const T x221 = x111 * x110;
	const T x230 = x210 * x020;
	const T x302 = x201 * x101;
	const T x311 = x111 * x200;
	const T x320 = x210 * x110;
	const T x401 = x201 * x200;
	const T x410 = x210 * x200;
	const T x500 = x300 * x200;
	T& D000 = D[0];
	T& D001 = D[21];
	T& D002 = D[36];
	T& D010 = D[2];
	T& D011 = D[23];
	T& D020 = D[5];
	T& D021 = D[26];
	T& D030 = D[9];
	T& D031 = D[30];
	T& D040 = D[14];
	T& D041 = D[35];
	T& D050 = D[20];
	T& D100 = D[1];
	T& D101 = D[22];
	T& D110 = D[4];
	T& D111 = D[25];
	T& D120 = D[8];
	T& D121 = D[29];
	T& D130 = D[13];
	T& D131 = D[34];
	T& D140 = D[19];
	T& D200 = D[3];
	T& D201 = D[24];
	T& D210 = D[7];
	T& D211 = D[28];
	T& D220 = D[12];
	T& D221 = D[33];
	T& D230 = D[18];
	T& D300 = D[6];
	T& D301 = D[27];
	T& D310 = D[11];
	T& D311 = D[32];
	T& D320 = D[17];
	T& D400 = D[10];
	T& D401 = D[31];
	T& D410 = D[16];
	T& D500 = D[15];
	D000 = x000;
	D001 = x001;
	D002 = T(2.00000000e+00) * x002;
	D500 = T(1.20000000e+02) * x500;
	D002 = fmaf(T(-1.00000000e+00), x020, D002);
	D002 = fmaf(T(-1.00000000e+00), x200, D002);
	D010 = x010;
	D011 = T(3.00000000e+00) * x011;
	D020 = T(-1.00000000e+00) * x002;
	D020 = fmaf(T(2.00000000e+00), x020, D020);
	D500 = fmaf(T(-6.00000000e+02), x320, D500);
	D020 = fmaf(T(-1.00000000e+00), x200, D020);
	D021 = T(-3.00000000e+00) * x003;
	D021 = fmaf(T(1.20000000e+01), x021, D021);
	D500 = fmaf(T(-6.00000000e+02), x302, D500);
	D021 = fmaf(T(-3.00000000e+00), x201, D021);
	D030 = T(-9.00000000e+00) * x012;
	D030 = fmaf(T(6.00000000e+00), x030, D030);
	D500 = fmaf(T(2.25000000e+02), x140, D500);
	D030 = fmaf(T(-9.00000000e+00), x210, D030);
	D031 = T(-4.50000000e+01) * x013;
	D031 = fmaf(T(6.00000000e+01), x031, D031);
	D500 = fmaf(T(4.50000000e+02), x122, D500);
	D031 = fmaf(T(-4.50000000e+01), x211, D031);
	D040 = T(9.00000000e+00) * x004;
	D040 = fmaf(T(-7.20000000e+01), x022, D040);
	D500 = fmaf(T(2.25000000e+02), x104, D500);
	D040 = fmaf(T(2.40000000e+01), x040, D040);
	D410 = T(3.60000000e+02) * x410;
	D410 = fmaf(T(-5.40000000e+02), x230, D410);
	D040 = fmaf(T(1.80000000e+01), x202, D040);
	D040 = fmaf(T(-7.20000000e+01), x220, D040);
	D410 = fmaf(T(-5.40000000e+02), x212, D410);
	D040 = fmaf(T(9.00000000e+00), x400, D040);
	D041 = T(4.50000000e+01) * x005;
	D041 = fmaf(T(-5.40000000e+02), x023, D041);
	D410 = fmaf(T(4.50000000e+01), x050, D410);
	D041 = fmaf(T(3.60000000e+02), x041, D041);
	D410 = fmaf(T(9.00000000e+01), x032, D410);
	D410 = fmaf(T(4.50000000e+01), x014, D410);
	D041 = fmaf(T(9.00000000e+01), x203, D041);
	D041 = fmaf(T(-5.40000000e+02), x221, D041);
	D401 = T(3.60000000e+02) * x401;
	D041 = fmaf(T(4.50000000e+01), x401, D041);
	D050 = T(2.25000000e+02) * x014;
	D050 = fmaf(T(-6.00000000e+02), x032, D050);
	D401 = fmaf(T(-5.40000000e+02), x221, D401);
	D050 = fmaf(T(1.20000000e+02), x050, D050);
	D401 = fmaf(T(-5.40000000e+02), x203, D401);
	D401 = fmaf(T(4.50000000e+01), x041, D401);
	D050 = fmaf(T(4.50000000e+02), x212, D050);
	D050 = fmaf(T(-6.00000000e+02), x230, D050);
	D401 = fmaf(T(9.00000000e+01), x023, D401);
	D050 = fmaf(T(2.25000000e+02), x410, D050);
	D100 = x100;
	D101 = T(3.00000000e+00) * x101;
	D110 = T(3.00000000e+00) * x110;
	D111 = T(1.50000000e+01) * x111;
	D120 = T(-3.00000000e+00) * x102;
	D120 = fmaf(T(1.20000000e+01), x120, D120);
	D401 = fmaf(T(4.50000000e+01), x005, D401);
	D120 = fmaf(T(-3.00000000e+00), x300, D120);
	D121 = T(-1.50000000e+01) * x103;
	D121 = fmaf(T(9.00000000e+01), x121, D121);
	D400 = T(2.40000000e+01) * x400;
	D121 = fmaf(T(-1.50000000e+01), x301, D121);
	D130 = T(-4.50000000e+01) * x112;
	D130 = fmaf(T(6.00000000e+01), x130, D130);
	D400 = fmaf(T(-7.20000000e+01), x220, D400);
	D130 = fmaf(T(-4.50000000e+01), x310, D130);
	D131 = T(-3.15000000e+02) * x113;
	D131 = fmaf(T(6.30000000e+02), x131, D131);
	D400 = fmaf(T(-7.20000000e+01), x202, D400);
	D131 = fmaf(T(-3.15000000e+02), x311, D131);
	D140 = T(4.50000000e+01) * x104;
	D140 = fmaf(T(-5.40000000e+02), x122, D140);
	D400 = fmaf(T(9.00000000e+00), x040, D400);
	D140 = fmaf(T(3.60000000e+02), x140, D140);
	D400 = fmaf(T(1.80000000e+01), x022, D400);
	D400 = fmaf(T(9.00000000e+00), x004, D400);
	D140 = fmaf(T(9.00000000e+01), x302, D140);
	D140 = fmaf(T(-5.40000000e+02), x320, D140);
	D320 = T(-6.00000000e+01) * x500;
	D140 = fmaf(T(4.50000000e+01), x500, D140);
	D200 = T(-1.00000000e+00) * x002;
	D200 = fmaf(T(-1.00000000e+00), x020, D200);
	D200 = fmaf(T(2.00000000e+00), x200, D200);
	D320 = fmaf(T(6.15000000e+02), x320, D320);
	D201 = T(-3.00000000e+00) * x003;
	D201 = fmaf(T(-3.00000000e+00), x021, D201);
	D201 = fmaf(T(1.20000000e+01), x201, D201);
	D320 = fmaf(T(-1.50000000e+01), x302, D320);
	D210 = T(-3.00000000e+00) * x012;
	D210 = fmaf(T(-3.00000000e+00), x030, D210);
	D210 = fmaf(T(1.20000000e+01), x210, D210);
	D320 = fmaf(T(-2.70000000e+02), x140, D320);
	D211 = T(-1.50000000e+01) * x013;
	D211 = fmaf(T(-1.50000000e+01), x031, D211);
	D211 = fmaf(T(9.00000000e+01), x211, D211);
	D320 = fmaf(T(-2.25000000e+02), x122, D320);
	D220 = T(3.00000000e+00) * x004;
	D220 = fmaf(T(-9.00000000e+00), x022, D220);
	D320 = fmaf(T(4.50000000e+01), x104, D320);
	D220 = fmaf(T(-1.20000000e+01), x040, D220);
	D311 = T(6.30000000e+02) * x311;
	D220 = fmaf(T(-9.00000000e+00), x202, D220);
	D311 = fmaf(T(-3.15000000e+02), x131, D311);
	D220 = fmaf(T(8.10000000e+01), x220, D220);
	D311 = fmaf(T(-3.15000000e+02), x113, D311);
	D310 = T(6.00000000e+01) * x310;
	D310 = fmaf(T(-4.50000000e+01), x130, D310);
	D220 = fmaf(T(-1.20000000e+01), x400, D220);
	D310 = fmaf(T(-4.50000000e+01), x112, D310);
	D221 = T(1.50000000e+01) * x005;
	D221 = fmaf(T(-7.50000000e+01), x023, D221);
	D301 = T(6.00000000e+01) * x301;
	D221 = fmaf(T(-9.00000000e+01), x041, D221);
	D301 = fmaf(T(-4.50000000e+01), x121, D301);
	D221 = fmaf(T(-7.50000000e+01), x203, D221);
	D301 = fmaf(T(-4.50000000e+01), x103, D301);
	D221 = fmaf(T(7.65000000e+02), x221, D221);
	D300 = T(6.00000000e+00) * x300;
	D300 = fmaf(T(-9.00000000e+00), x102, D300);
	D300 = fmaf(T(-9.00000000e+00), x120, D300);
	D221 = fmaf(T(-9.00000000e+01), x401, D221);
	D230 = T(-2.70000000e+02) * x410;
	D230 = fmaf(T(4.50000000e+01), x014, D230);
	D230 = fmaf(T(-1.50000000e+01), x032, D230);
	D230 = fmaf(T(6.15000000e+02), x230, D230);
	D230 = fmaf(T(-6.00000000e+01), x050, D230);
	D230 = fmaf(T(-2.25000000e+02), x212, D230);
	array<T, 6> rinv_pow;
	r2 = sqr(X[0], X[1], X[2]);
	const T r = SQRT(r2);
	const T rinv = (r > T(0)) / max(r, T(1e-20));
	const T rinv2 = rinv * rinv;
	rinv_pow[0] = -rinv;
	for (int i = 1; i < 6; i++) {
		rinv_pow[i] = -rinv2 * rinv_pow[i - 1];
		NAN_TEST(rinv_pow[i]);
	}
	constexpr float scale0 = scale;
	constexpr float scale1 = scale0 * scale;
	constexpr float scale2 = scale1 * scale;
	constexpr float scale3 = scale2 * scale;
	constexpr float scale4 = scale3 * scale;
	constexpr float scale5 = scale4 * scale;
	rinv_pow[0] *= scale0;
	rinv_pow[1] *= scale1;
	rinv_pow[2] *= scale2;
	rinv_pow[3] *= scale3;
	rinv_pow[4] *= scale4;
	rinv_pow[5] *= scale5;
	D000 *= rinv_pow[0];
	D001 *= rinv_pow[1];
	D002 *= rinv_pow[2];
	D010 *= rinv_pow[1];
	D011 *= rinv_pow[2];
	D020 *= rinv_pow[2];
	D021 *= rinv_pow[3];
	D030 *= rinv_pow[3];
	D031 *= rinv_pow[4];
	D040 *= rinv_pow[4];
	D041 *= rinv_pow[5];
	D050 *= rinv_pow[5];
	D100 *= rinv_pow[1];
	D101 *= rinv_pow[2];
	D110 *= rinv_pow[2];
	D111 *= rinv_pow[3];
	D120 *= rinv_pow[3];
	D121 *= rinv_pow[4];
	D130 *= rinv_pow[4];
	D131 *= rinv_pow[5];
	D140 *= rinv_pow[5];
	D200 *= rinv_pow[2];
	D201 *= rinv_pow[3];
	D210 *= rinv_pow[3];
	D211 *= rinv_pow[4];
	D220 *= rinv_pow[4];
	D221 *= rinv_pow[5];
	D230 *= rinv_pow[5];
	D300 *= rinv_pow[3];
	D301 *= rinv_pow[4];
	D310 *= rinv_pow[4];
	D311 *= rinv_pow[5];
	D320 *= rinv_pow[5];
	D400 *= rinv_pow[4];
	D401 *= rinv_pow[5];
	D410 *= rinv_pow[5];
	D500 *= rinv_pow[5];
	return 350;
}
template<class T>
CUDA_EXPORT int ewald_greens_function(tensor_trless_sym<T,6> &D, array<T, NDIM> X) {
	ewald_const econst;
	int flops = 7;
	T r = SQRT(FMA(X[0], X[0], FMA(X[1], X[1], sqr(X[2]))));
	const T fouroversqrtpi = T(2.25675833e+00);
	tensor_sym<T, 6> Dreal;
	tensor_trless_sym<T,6> Dfour;
	Dreal = 0.0f;
	Dfour = 0.0f;
	D = 0.0f;
	const auto realsz = econst.nreal();
	const T zero_mask = r > T(0);
	int icnt = 0;
	for (int i = 0; i < realsz; i++) {
		const auto n = econst.real_index(i);
		array<T, NDIM> dx;
		for (int dim = 0; dim < NDIM; dim++) {
			dx[dim] = X[dim] - n[dim];
		}
		T r2 = FMA(dx[0], dx[0], FMA(dx[1], dx[1], sqr(dx[2])));
		if (anytrue(r2 < (EWALD_REAL_CUTOFF2))) {
			icnt++;
			const T r = SQRT(r2);
			const T rinv = (r > T(0)) / max(r, 1.0e-20);
			const T r2inv = rinv * rinv;
			T exp0;
			T erfc0 = erfcexp(2.f * r, &exp0);
			const T expfactor = fouroversqrtpi * exp0;
			T e0 = expfactor * r2inv;
			const T d0 = -erfc0 * rinv;
			const T d1 = FMA(T(-1) * d0, r2inv, e0);
			e0 *= T(-8);
			const T d2 = FMA(T(-3) * d1, r2inv, e0);
			e0 *= T(-8);
			const T d3 = FMA(T(-5) * d2, r2inv, e0);
			e0 *= T(-8);
			const T d4 = FMA(T(-7) * d3, r2inv, e0);
			e0 *= T(-8);
			const T d5 = FMA(T(-9) * d4, r2inv, e0);
			const T rinv2pow0 = T(1);
			const T rinv2pow1 = r2inv;
			const T rinv2pow2 = rinv2pow1 * r2inv;
			const T rinv2pow3 = rinv2pow2 * r2inv;
			const T rinv2pow4 = rinv2pow3 * r2inv;
			const T rinv2pow5 = rinv2pow4 * r2inv;
			const T Drinvpow_0_0 = d0 * rinv2pow0;
			const T Drinvpow_0_1 = d0 * rinv2pow1;
			const T Drinvpow_0_2 = d0 * rinv2pow2;
			const T Drinvpow_0_3 = d0 * rinv2pow3;
			const T Drinvpow_0_4 = d0 * rinv2pow4;
			const T Drinvpow_0_5 = d0 * rinv2pow5;
			const T Drinvpow_1_0 = d1 * rinv2pow0;
			const T Drinvpow_1_1 = d1 * rinv2pow1;
			const T Drinvpow_1_2 = d1 * rinv2pow2;
			const T Drinvpow_1_3 = d1 * rinv2pow3;
			const T Drinvpow_1_4 = d1 * rinv2pow4;
			const T Drinvpow_1_5 = d1 * rinv2pow5;
			const T Drinvpow_2_0 = d2 * rinv2pow0;
			const T Drinvpow_2_1 = d2 * rinv2pow1;
			const T Drinvpow_2_2 = d2 * rinv2pow2;
			const T Drinvpow_2_3 = d2 * rinv2pow3;
			const T Drinvpow_2_4 = d2 * rinv2pow4;
			const T Drinvpow_2_5 = d2 * rinv2pow5;
			const T Drinvpow_3_0 = d3 * rinv2pow0;
			const T Drinvpow_3_1 = d3 * rinv2pow1;
			const T Drinvpow_3_2 = d3 * rinv2pow2;
			const T Drinvpow_3_3 = d3 * rinv2pow3;
			const T Drinvpow_3_4 = d3 * rinv2pow4;
			const T Drinvpow_3_5 = d3 * rinv2pow5;
			const T Drinvpow_4_0 = d4 * rinv2pow0;
			const T Drinvpow_4_1 = d4 * rinv2pow1;
			const T Drinvpow_4_2 = d4 * rinv2pow2;
			const T Drinvpow_4_3 = d4 * rinv2pow3;
			const T Drinvpow_4_4 = d4 * rinv2pow4;
			const T Drinvpow_4_5 = d4 * rinv2pow5;
			const T Drinvpow_5_0 = d5 * rinv2pow0;
			const T Drinvpow_5_1 = d5 * rinv2pow1;
			const T Drinvpow_5_2 = d5 * rinv2pow2;
			const T Drinvpow_5_3 = d5 * rinv2pow3;
			const T Drinvpow_5_4 = d5 * rinv2pow4;
			const T Drinvpow_5_5 = d5 * rinv2pow5;
			const T x000 = T(1);
			const T& x100 = dx[0];
			const T& x010 = dx[1];
			const T& x001 = dx[2];
			const T x002 = x001 * x001;
			const T x011 = x010 * x001;
			const T x020 = x010 * x010;
			const T x101 = x100 * x001;
			const T x110 = x100 * x010;
			const T x200 = x100 * x100;
			const T x003 = x002 * x001;
			const T x012 = x011 * x001;
			const T x021 = x011 * x010;
			const T x030 = x020 * x010;
			const T x102 = x101 * x001;
			const T x111 = x110 * x001;
			const T x120 = x110 * x010;
			const T x201 = x101 * x100;
			const T x210 = x110 * x100;
			const T x300 = x200 * x100;
			const T x004 = x002 * x002;
			const T x013 = x011 * x002;
			const T x022 = x011 * x011;
			const T x031 = x011 * x020;
			const T x040 = x020 * x020;
			const T x103 = x101 * x002;
			const T x112 = x110 * x002;
			const T x121 = x110 * x011;
			const T x130 = x110 * x020;
			const T x202 = x101 * x101;
			const T x211 = x110 * x101;
			const T x220 = x110 * x110;
			const T x301 = x101 * x200;
			const T x310 = x110 * x200;
			const T x400 = x200 * x200;
			const T x005 = x003 * x002;
			const T x014 = x012 * x002;
			const T x023 = x021 * x002;
			const T x032 = x021 * x011;
			const T x041 = x021 * x020;
			const T x050 = x030 * x020;
			const T x104 = x102 * x002;
			const T x113 = x111 * x002;
			const T x122 = x111 * x011;
			const T x131 = x111 * x020;
			const T x140 = x120 * x020;
			const T x203 = x201 * x002;
			const T x212 = x111 * x101;
			const T x221 = x111 * x110;
			const T x230 = x210 * x020;
			const T x302 = x201 * x101;
			const T x311 = x111 * x200;
			const T x320 = x210 * x110;
			const T x401 = x201 * x200;
			const T x410 = x210 * x200;
			const T x500 = x300 * x200;
			Dreal[0] = fmaf(x000, Drinvpow_0_0, Dreal[0]);
			Dreal[3] = fmaf(x001, Drinvpow_1_0, Dreal[3]);
			Dreal[9] = fmaf(x002, Drinvpow_2_0, Dreal[9]);
			Dreal[9] = fmaf(x002, Drinvpow_1_1, Dreal[9]);
			Dreal[9] = fmaf(x020, Drinvpow_1_1, Dreal[9]);
			Dreal[9] = fmaf(x200, Drinvpow_1_1, Dreal[9]);
			Dreal[19] = fmaf(x003, Drinvpow_3_0, Dreal[19]);
			Dreal[19] = fmaf(3.00000000e+00 * x003, Drinvpow_2_1, Dreal[19]);
			Dreal[19] = fmaf(3.00000000e+00 * x021, Drinvpow_2_1, Dreal[19]);
			Dreal[19] = fmaf(3.00000000e+00 * x201, Drinvpow_2_1, Dreal[19]);
			Dreal[34] = fmaf(x004, Drinvpow_4_0, Dreal[34]);
			Dreal[34] = fmaf(6.00000000e+00 * x004, Drinvpow_3_1, Dreal[34]);
			Dreal[34] = fmaf(6.00000000e+00 * x022, Drinvpow_3_1, Dreal[34]);
			Dreal[34] = fmaf(6.00000000e+00 * x202, Drinvpow_3_1, Dreal[34]);
			Dreal[34] = fmaf(3.00000000e+00 * x004, Drinvpow_2_2, Dreal[34]);
			Dreal[34] = fmaf(6.00000000e+00 * x022, Drinvpow_2_2, Dreal[34]);
			Dreal[34] = fmaf(3.00000000e+00 * x040, Drinvpow_2_2, Dreal[34]);
			Dreal[34] = fmaf(6.00000000e+00 * x202, Drinvpow_2_2, Dreal[34]);
			Dreal[34] = fmaf(6.00000000e+00 * x220, Drinvpow_2_2, Dreal[34]);
			Dreal[34] = fmaf(3.00000000e+00 * x400, Drinvpow_2_2, Dreal[34]);
			Dreal[55] = fmaf(x005, Drinvpow_5_0, Dreal[55]);
			Dreal[55] = fmaf(1.00000000e+01 * x005, Drinvpow_4_1, Dreal[55]);
			Dreal[55] = fmaf(1.00000000e+01 * x023, Drinvpow_4_1, Dreal[55]);
			Dreal[55] = fmaf(1.00000000e+01 * x203, Drinvpow_4_1, Dreal[55]);
			Dreal[55] = fmaf(1.50000000e+01 * x005, Drinvpow_3_2, Dreal[55]);
			Dreal[55] = fmaf(3.00000000e+01 * x023, Drinvpow_3_2, Dreal[55]);
			Dreal[55] = fmaf(1.50000000e+01 * x041, Drinvpow_3_2, Dreal[55]);
			Dreal[55] = fmaf(3.00000000e+01 * x203, Drinvpow_3_2, Dreal[55]);
			Dreal[55] = fmaf(3.00000000e+01 * x221, Drinvpow_3_2, Dreal[55]);
			Dreal[55] = fmaf(1.50000000e+01 * x401, Drinvpow_3_2, Dreal[55]);
			Dreal[2] = fmaf(x010, Drinvpow_1_0, Dreal[2]);
			Dreal[8] = fmaf(x011, Drinvpow_2_0, Dreal[8]);
			Dreal[18] = fmaf(x012, Drinvpow_3_0, Dreal[18]);
			Dreal[18] = fmaf(x012, Drinvpow_2_1, Dreal[18]);
			Dreal[18] = fmaf(x030, Drinvpow_2_1, Dreal[18]);
			Dreal[18] = fmaf(x210, Drinvpow_2_1, Dreal[18]);
			Dreal[33] = fmaf(x013, Drinvpow_4_0, Dreal[33]);
			Dreal[33] = fmaf(3.00000000e+00 * x013, Drinvpow_3_1, Dreal[33]);
			Dreal[33] = fmaf(3.00000000e+00 * x031, Drinvpow_3_1, Dreal[33]);
			Dreal[33] = fmaf(3.00000000e+00 * x211, Drinvpow_3_1, Dreal[33]);
			Dreal[54] = fmaf(x014, Drinvpow_5_0, Dreal[54]);
			Dreal[54] = fmaf(6.00000000e+00 * x014, Drinvpow_4_1, Dreal[54]);
			Dreal[54] = fmaf(6.00000000e+00 * x032, Drinvpow_4_1, Dreal[54]);
			Dreal[54] = fmaf(6.00000000e+00 * x212, Drinvpow_4_1, Dreal[54]);
			Dreal[54] = fmaf(3.00000000e+00 * x014, Drinvpow_3_2, Dreal[54]);
			Dreal[54] = fmaf(6.00000000e+00 * x032, Drinvpow_3_2, Dreal[54]);
			Dreal[54] = fmaf(3.00000000e+00 * x050, Drinvpow_3_2, Dreal[54]);
			Dreal[54] = fmaf(6.00000000e+00 * x212, Drinvpow_3_2, Dreal[54]);
			Dreal[54] = fmaf(6.00000000e+00 * x230, Drinvpow_3_2, Dreal[54]);
			Dreal[54] = fmaf(3.00000000e+00 * x410, Drinvpow_3_2, Dreal[54]);
			Dreal[7] = fmaf(x020, Drinvpow_2_0, Dreal[7]);
			Dreal[7] = fmaf(x002, Drinvpow_1_1, Dreal[7]);
			Dreal[7] = fmaf(x020, Drinvpow_1_1, Dreal[7]);
			Dreal[7] = fmaf(x200, Drinvpow_1_1, Dreal[7]);
			Dreal[17] = fmaf(x021, Drinvpow_3_0, Dreal[17]);
			Dreal[17] = fmaf(x003, Drinvpow_2_1, Dreal[17]);
			Dreal[17] = fmaf(x021, Drinvpow_2_1, Dreal[17]);
			Dreal[17] = fmaf(x201, Drinvpow_2_1, Dreal[17]);
			Dreal[32] = fmaf(x022, Drinvpow_4_0, Dreal[32]);
			Dreal[32] = fmaf(x022, Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x040, Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x220, Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x004, Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x022, Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x202, Drinvpow_3_1, Dreal[32]);
			Dreal[32] = fmaf(x004, Drinvpow_2_2, Dreal[32]);
			Dreal[32] = fmaf(2.00000000e+00 * x022, Drinvpow_2_2, Dreal[32]);
			Dreal[32] = fmaf(x040, Drinvpow_2_2, Dreal[32]);
			Dreal[32] = fmaf(2.00000000e+00 * x202, Drinvpow_2_2, Dreal[32]);
			Dreal[32] = fmaf(2.00000000e+00 * x220, Drinvpow_2_2, Dreal[32]);
			Dreal[32] = fmaf(x400, Drinvpow_2_2, Dreal[32]);
			Dreal[53] = fmaf(x023, Drinvpow_5_0, Dreal[53]);
			Dreal[53] = fmaf(3.00000000e+00 * x023, Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(3.00000000e+00 * x041, Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(3.00000000e+00 * x221, Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(x005, Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(x023, Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(x203, Drinvpow_4_1, Dreal[53]);
			Dreal[53] = fmaf(3.00000000e+00 * x005, Drinvpow_3_2, Dreal[53]);
			Dreal[53] = fmaf(6.00000000e+00 * x023, Drinvpow_3_2, Dreal[53]);
			Dreal[53] = fmaf(3.00000000e+00 * x041, Drinvpow_3_2, Dreal[53]);
			Dreal[53] = fmaf(6.00000000e+00 * x203, Drinvpow_3_2, Dreal[53]);
			Dreal[53] = fmaf(6.00000000e+00 * x221, Drinvpow_3_2, Dreal[53]);
			Dreal[53] = fmaf(3.00000000e+00 * x401, Drinvpow_3_2, Dreal[53]);
			Dreal[16] = fmaf(x030, Drinvpow_3_0, Dreal[16]);
			Dreal[16] = fmaf(3.00000000e+00 * x012, Drinvpow_2_1, Dreal[16]);
			Dreal[16] = fmaf(3.00000000e+00 * x030, Drinvpow_2_1, Dreal[16]);
			Dreal[16] = fmaf(3.00000000e+00 * x210, Drinvpow_2_1, Dreal[16]);
			Dreal[31] = fmaf(x031, Drinvpow_4_0, Dreal[31]);
			Dreal[31] = fmaf(3.00000000e+00 * x013, Drinvpow_3_1, Dreal[31]);
			Dreal[31] = fmaf(3.00000000e+00 * x031, Drinvpow_3_1, Dreal[31]);
			Dreal[31] = fmaf(3.00000000e+00 * x211, Drinvpow_3_1, Dreal[31]);
			Dreal[52] = fmaf(x032, Drinvpow_5_0, Dreal[52]);
			Dreal[52] = fmaf(x032, Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(x050, Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(x230, Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(3.00000000e+00 * x014, Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(3.00000000e+00 * x032, Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(3.00000000e+00 * x212, Drinvpow_4_1, Dreal[52]);
			Dreal[52] = fmaf(3.00000000e+00 * x014, Drinvpow_3_2, Dreal[52]);
			Dreal[52] = fmaf(6.00000000e+00 * x032, Drinvpow_3_2, Dreal[52]);
			Dreal[52] = fmaf(3.00000000e+00 * x050, Drinvpow_3_2, Dreal[52]);
			Dreal[52] = fmaf(6.00000000e+00 * x212, Drinvpow_3_2, Dreal[52]);
			Dreal[52] = fmaf(6.00000000e+00 * x230, Drinvpow_3_2, Dreal[52]);
			Dreal[52] = fmaf(3.00000000e+00 * x410, Drinvpow_3_2, Dreal[52]);
			Dreal[30] = fmaf(x040, Drinvpow_4_0, Dreal[30]);
			Dreal[30] = fmaf(6.00000000e+00 * x022, Drinvpow_3_1, Dreal[30]);
			Dreal[30] = fmaf(6.00000000e+00 * x040, Drinvpow_3_1, Dreal[30]);
			Dreal[30] = fmaf(6.00000000e+00 * x220, Drinvpow_3_1, Dreal[30]);
			Dreal[30] = fmaf(3.00000000e+00 * x004, Drinvpow_2_2, Dreal[30]);
			Dreal[30] = fmaf(6.00000000e+00 * x022, Drinvpow_2_2, Dreal[30]);
			Dreal[30] = fmaf(3.00000000e+00 * x040, Drinvpow_2_2, Dreal[30]);
			Dreal[30] = fmaf(6.00000000e+00 * x202, Drinvpow_2_2, Dreal[30]);
			Dreal[30] = fmaf(6.00000000e+00 * x220, Drinvpow_2_2, Dreal[30]);
			Dreal[30] = fmaf(3.00000000e+00 * x400, Drinvpow_2_2, Dreal[30]);
			Dreal[51] = fmaf(x041, Drinvpow_5_0, Dreal[51]);
			Dreal[51] = fmaf(6.00000000e+00 * x023, Drinvpow_4_1, Dreal[51]);
			Dreal[51] = fmaf(6.00000000e+00 * x041, Drinvpow_4_1, Dreal[51]);
			Dreal[51] = fmaf(6.00000000e+00 * x221, Drinvpow_4_1, Dreal[51]);
			Dreal[51] = fmaf(3.00000000e+00 * x005, Drinvpow_3_2, Dreal[51]);
			Dreal[51] = fmaf(6.00000000e+00 * x023, Drinvpow_3_2, Dreal[51]);
			Dreal[51] = fmaf(3.00000000e+00 * x041, Drinvpow_3_2, Dreal[51]);
			Dreal[51] = fmaf(6.00000000e+00 * x203, Drinvpow_3_2, Dreal[51]);
			Dreal[51] = fmaf(6.00000000e+00 * x221, Drinvpow_3_2, Dreal[51]);
			Dreal[51] = fmaf(3.00000000e+00 * x401, Drinvpow_3_2, Dreal[51]);
			Dreal[50] = fmaf(x050, Drinvpow_5_0, Dreal[50]);
			Dreal[50] = fmaf(1.00000000e+01 * x032, Drinvpow_4_1, Dreal[50]);
			Dreal[50] = fmaf(1.00000000e+01 * x050, Drinvpow_4_1, Dreal[50]);
			Dreal[50] = fmaf(1.00000000e+01 * x230, Drinvpow_4_1, Dreal[50]);
			Dreal[50] = fmaf(1.50000000e+01 * x014, Drinvpow_3_2, Dreal[50]);
			Dreal[50] = fmaf(3.00000000e+01 * x032, Drinvpow_3_2, Dreal[50]);
			Dreal[50] = fmaf(1.50000000e+01 * x050, Drinvpow_3_2, Dreal[50]);
			Dreal[50] = fmaf(3.00000000e+01 * x212, Drinvpow_3_2, Dreal[50]);
			Dreal[50] = fmaf(3.00000000e+01 * x230, Drinvpow_3_2, Dreal[50]);
			Dreal[50] = fmaf(1.50000000e+01 * x410, Drinvpow_3_2, Dreal[50]);
			Dreal[1] = fmaf(x100, Drinvpow_1_0, Dreal[1]);
			Dreal[6] = fmaf(x101, Drinvpow_2_0, Dreal[6]);
			Dreal[15] = fmaf(x102, Drinvpow_3_0, Dreal[15]);
			Dreal[15] = fmaf(x102, Drinvpow_2_1, Dreal[15]);
			Dreal[15] = fmaf(x120, Drinvpow_2_1, Dreal[15]);
			Dreal[15] = fmaf(x300, Drinvpow_2_1, Dreal[15]);
			Dreal[29] = fmaf(x103, Drinvpow_4_0, Dreal[29]);
			Dreal[29] = fmaf(3.00000000e+00 * x103, Drinvpow_3_1, Dreal[29]);
			Dreal[29] = fmaf(3.00000000e+00 * x121, Drinvpow_3_1, Dreal[29]);
			Dreal[29] = fmaf(3.00000000e+00 * x301, Drinvpow_3_1, Dreal[29]);
			Dreal[49] = fmaf(x104, Drinvpow_5_0, Dreal[49]);
			Dreal[49] = fmaf(6.00000000e+00 * x104, Drinvpow_4_1, Dreal[49]);
			Dreal[49] = fmaf(6.00000000e+00 * x122, Drinvpow_4_1, Dreal[49]);
			Dreal[49] = fmaf(6.00000000e+00 * x302, Drinvpow_4_1, Dreal[49]);
			Dreal[49] = fmaf(3.00000000e+00 * x104, Drinvpow_3_2, Dreal[49]);
			Dreal[49] = fmaf(6.00000000e+00 * x122, Drinvpow_3_2, Dreal[49]);
			Dreal[49] = fmaf(3.00000000e+00 * x140, Drinvpow_3_2, Dreal[49]);
			Dreal[49] = fmaf(6.00000000e+00 * x302, Drinvpow_3_2, Dreal[49]);
			Dreal[49] = fmaf(6.00000000e+00 * x320, Drinvpow_3_2, Dreal[49]);
			Dreal[49] = fmaf(3.00000000e+00 * x500, Drinvpow_3_2, Dreal[49]);
			Dreal[5] = fmaf(x110, Drinvpow_2_0, Dreal[5]);
			Dreal[14] = fmaf(x111, Drinvpow_3_0, Dreal[14]);
			Dreal[28] = fmaf(x112, Drinvpow_4_0, Dreal[28]);
			Dreal[28] = fmaf(x112, Drinvpow_3_1, Dreal[28]);
			Dreal[28] = fmaf(x130, Drinvpow_3_1, Dreal[28]);
			Dreal[28] = fmaf(x310, Drinvpow_3_1, Dreal[28]);
			Dreal[48] = fmaf(x113, Drinvpow_5_0, Dreal[48]);
			Dreal[48] = fmaf(3.00000000e+00 * x113, Drinvpow_4_1, Dreal[48]);
			Dreal[48] = fmaf(3.00000000e+00 * x131, Drinvpow_4_1, Dreal[48]);
			Dreal[48] = fmaf(3.00000000e+00 * x311, Drinvpow_4_1, Dreal[48]);
			Dreal[13] = fmaf(x120, Drinvpow_3_0, Dreal[13]);
			Dreal[13] = fmaf(x102, Drinvpow_2_1, Dreal[13]);
			Dreal[13] = fmaf(x120, Drinvpow_2_1, Dreal[13]);
			Dreal[13] = fmaf(x300, Drinvpow_2_1, Dreal[13]);
			Dreal[27] = fmaf(x121, Drinvpow_4_0, Dreal[27]);
			Dreal[27] = fmaf(x103, Drinvpow_3_1, Dreal[27]);
			Dreal[27] = fmaf(x121, Drinvpow_3_1, Dreal[27]);
			Dreal[27] = fmaf(x301, Drinvpow_3_1, Dreal[27]);
			Dreal[47] = fmaf(x122, Drinvpow_5_0, Dreal[47]);
			Dreal[47] = fmaf(x122, Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x140, Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x320, Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x104, Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x122, Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x302, Drinvpow_4_1, Dreal[47]);
			Dreal[47] = fmaf(x104, Drinvpow_3_2, Dreal[47]);
			Dreal[47] = fmaf(2.00000000e+00 * x122, Drinvpow_3_2, Dreal[47]);
			Dreal[47] = fmaf(x140, Drinvpow_3_2, Dreal[47]);
			Dreal[47] = fmaf(2.00000000e+00 * x302, Drinvpow_3_2, Dreal[47]);
			Dreal[47] = fmaf(2.00000000e+00 * x320, Drinvpow_3_2, Dreal[47]);
			Dreal[47] = fmaf(x500, Drinvpow_3_2, Dreal[47]);
			Dreal[26] = fmaf(x130, Drinvpow_4_0, Dreal[26]);
			Dreal[26] = fmaf(3.00000000e+00 * x112, Drinvpow_3_1, Dreal[26]);
			Dreal[26] = fmaf(3.00000000e+00 * x130, Drinvpow_3_1, Dreal[26]);
			Dreal[26] = fmaf(3.00000000e+00 * x310, Drinvpow_3_1, Dreal[26]);
			Dreal[46] = fmaf(x131, Drinvpow_5_0, Dreal[46]);
			Dreal[46] = fmaf(3.00000000e+00 * x113, Drinvpow_4_1, Dreal[46]);
			Dreal[46] = fmaf(3.00000000e+00 * x131, Drinvpow_4_1, Dreal[46]);
			Dreal[46] = fmaf(3.00000000e+00 * x311, Drinvpow_4_1, Dreal[46]);
			Dreal[45] = fmaf(x140, Drinvpow_5_0, Dreal[45]);
			Dreal[45] = fmaf(6.00000000e+00 * x122, Drinvpow_4_1, Dreal[45]);
			Dreal[45] = fmaf(6.00000000e+00 * x140, Drinvpow_4_1, Dreal[45]);
			Dreal[45] = fmaf(6.00000000e+00 * x320, Drinvpow_4_1, Dreal[45]);
			Dreal[45] = fmaf(3.00000000e+00 * x104, Drinvpow_3_2, Dreal[45]);
			Dreal[45] = fmaf(6.00000000e+00 * x122, Drinvpow_3_2, Dreal[45]);
			Dreal[45] = fmaf(3.00000000e+00 * x140, Drinvpow_3_2, Dreal[45]);
			Dreal[45] = fmaf(6.00000000e+00 * x302, Drinvpow_3_2, Dreal[45]);
			Dreal[45] = fmaf(6.00000000e+00 * x320, Drinvpow_3_2, Dreal[45]);
			Dreal[45] = fmaf(3.00000000e+00 * x500, Drinvpow_3_2, Dreal[45]);
			Dreal[4] = fmaf(x200, Drinvpow_2_0, Dreal[4]);
			Dreal[4] = fmaf(x002, Drinvpow_1_1, Dreal[4]);
			Dreal[4] = fmaf(x020, Drinvpow_1_1, Dreal[4]);
			Dreal[4] = fmaf(x200, Drinvpow_1_1, Dreal[4]);
			Dreal[12] = fmaf(x201, Drinvpow_3_0, Dreal[12]);
			Dreal[12] = fmaf(x003, Drinvpow_2_1, Dreal[12]);
			Dreal[12] = fmaf(x021, Drinvpow_2_1, Dreal[12]);
			Dreal[12] = fmaf(x201, Drinvpow_2_1, Dreal[12]);
			Dreal[25] = fmaf(x202, Drinvpow_4_0, Dreal[25]);
			Dreal[25] = fmaf(x202, Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x220, Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x400, Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x004, Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x022, Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x202, Drinvpow_3_1, Dreal[25]);
			Dreal[25] = fmaf(x004, Drinvpow_2_2, Dreal[25]);
			Dreal[25] = fmaf(2.00000000e+00 * x022, Drinvpow_2_2, Dreal[25]);
			Dreal[25] = fmaf(x040, Drinvpow_2_2, Dreal[25]);
			Dreal[25] = fmaf(2.00000000e+00 * x202, Drinvpow_2_2, Dreal[25]);
			Dreal[25] = fmaf(2.00000000e+00 * x220, Drinvpow_2_2, Dreal[25]);
			Dreal[25] = fmaf(x400, Drinvpow_2_2, Dreal[25]);
			Dreal[44] = fmaf(x203, Drinvpow_5_0, Dreal[44]);
			Dreal[44] = fmaf(3.00000000e+00 * x203, Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(3.00000000e+00 * x221, Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(3.00000000e+00 * x401, Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(x005, Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(x023, Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(x203, Drinvpow_4_1, Dreal[44]);
			Dreal[44] = fmaf(3.00000000e+00 * x005, Drinvpow_3_2, Dreal[44]);
			Dreal[44] = fmaf(6.00000000e+00 * x023, Drinvpow_3_2, Dreal[44]);
			Dreal[44] = fmaf(3.00000000e+00 * x041, Drinvpow_3_2, Dreal[44]);
			Dreal[44] = fmaf(6.00000000e+00 * x203, Drinvpow_3_2, Dreal[44]);
			Dreal[44] = fmaf(6.00000000e+00 * x221, Drinvpow_3_2, Dreal[44]);
			Dreal[44] = fmaf(3.00000000e+00 * x401, Drinvpow_3_2, Dreal[44]);
			Dreal[11] = fmaf(x210, Drinvpow_3_0, Dreal[11]);
			Dreal[11] = fmaf(x012, Drinvpow_2_1, Dreal[11]);
			Dreal[11] = fmaf(x030, Drinvpow_2_1, Dreal[11]);
			Dreal[11] = fmaf(x210, Drinvpow_2_1, Dreal[11]);
			Dreal[24] = fmaf(x211, Drinvpow_4_0, Dreal[24]);
			Dreal[24] = fmaf(x013, Drinvpow_3_1, Dreal[24]);
			Dreal[24] = fmaf(x031, Drinvpow_3_1, Dreal[24]);
			Dreal[24] = fmaf(x211, Drinvpow_3_1, Dreal[24]);
			Dreal[43] = fmaf(x212, Drinvpow_5_0, Dreal[43]);
			Dreal[43] = fmaf(x212, Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x230, Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x410, Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x014, Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x032, Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x212, Drinvpow_4_1, Dreal[43]);
			Dreal[43] = fmaf(x014, Drinvpow_3_2, Dreal[43]);
			Dreal[43] = fmaf(2.00000000e+00 * x032, Drinvpow_3_2, Dreal[43]);
			Dreal[43] = fmaf(x050, Drinvpow_3_2, Dreal[43]);
			Dreal[43] = fmaf(2.00000000e+00 * x212, Drinvpow_3_2, Dreal[43]);
			Dreal[43] = fmaf(2.00000000e+00 * x230, Drinvpow_3_2, Dreal[43]);
			Dreal[43] = fmaf(x410, Drinvpow_3_2, Dreal[43]);
			Dreal[23] = fmaf(x220, Drinvpow_4_0, Dreal[23]);
			Dreal[23] = fmaf(x202, Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x220, Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x400, Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x022, Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x040, Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x220, Drinvpow_3_1, Dreal[23]);
			Dreal[23] = fmaf(x004, Drinvpow_2_2, Dreal[23]);
			Dreal[23] = fmaf(2.00000000e+00 * x022, Drinvpow_2_2, Dreal[23]);
			Dreal[23] = fmaf(x040, Drinvpow_2_2, Dreal[23]);
			Dreal[23] = fmaf(2.00000000e+00 * x202, Drinvpow_2_2, Dreal[23]);
			Dreal[23] = fmaf(2.00000000e+00 * x220, Drinvpow_2_2, Dreal[23]);
			Dreal[23] = fmaf(x400, Drinvpow_2_2, Dreal[23]);
			Dreal[42] = fmaf(x221, Drinvpow_5_0, Dreal[42]);
			Dreal[42] = fmaf(x203, Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x221, Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x401, Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x023, Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x041, Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x221, Drinvpow_4_1, Dreal[42]);
			Dreal[42] = fmaf(x005, Drinvpow_3_2, Dreal[42]);
			Dreal[42] = fmaf(2.00000000e+00 * x023, Drinvpow_3_2, Dreal[42]);
			Dreal[42] = fmaf(x041, Drinvpow_3_2, Dreal[42]);
			Dreal[42] = fmaf(2.00000000e+00 * x203, Drinvpow_3_2, Dreal[42]);
			Dreal[42] = fmaf(2.00000000e+00 * x221, Drinvpow_3_2, Dreal[42]);
			Dreal[42] = fmaf(x401, Drinvpow_3_2, Dreal[42]);
			Dreal[41] = fmaf(x230, Drinvpow_5_0, Dreal[41]);
			Dreal[41] = fmaf(3.00000000e+00 * x212, Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(3.00000000e+00 * x230, Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(3.00000000e+00 * x410, Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(x032, Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(x050, Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(x230, Drinvpow_4_1, Dreal[41]);
			Dreal[41] = fmaf(3.00000000e+00 * x014, Drinvpow_3_2, Dreal[41]);
			Dreal[41] = fmaf(6.00000000e+00 * x032, Drinvpow_3_2, Dreal[41]);
			Dreal[41] = fmaf(3.00000000e+00 * x050, Drinvpow_3_2, Dreal[41]);
			Dreal[41] = fmaf(6.00000000e+00 * x212, Drinvpow_3_2, Dreal[41]);
			Dreal[41] = fmaf(6.00000000e+00 * x230, Drinvpow_3_2, Dreal[41]);
			Dreal[41] = fmaf(3.00000000e+00 * x410, Drinvpow_3_2, Dreal[41]);
			Dreal[10] = fmaf(x300, Drinvpow_3_0, Dreal[10]);
			Dreal[10] = fmaf(3.00000000e+00 * x102, Drinvpow_2_1, Dreal[10]);
			Dreal[10] = fmaf(3.00000000e+00 * x120, Drinvpow_2_1, Dreal[10]);
			Dreal[10] = fmaf(3.00000000e+00 * x300, Drinvpow_2_1, Dreal[10]);
			Dreal[22] = fmaf(x301, Drinvpow_4_0, Dreal[22]);
			Dreal[22] = fmaf(3.00000000e+00 * x103, Drinvpow_3_1, Dreal[22]);
			Dreal[22] = fmaf(3.00000000e+00 * x121, Drinvpow_3_1, Dreal[22]);
			Dreal[22] = fmaf(3.00000000e+00 * x301, Drinvpow_3_1, Dreal[22]);
			Dreal[40] = fmaf(x302, Drinvpow_5_0, Dreal[40]);
			Dreal[40] = fmaf(x302, Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(x320, Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(x500, Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(3.00000000e+00 * x104, Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(3.00000000e+00 * x122, Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(3.00000000e+00 * x302, Drinvpow_4_1, Dreal[40]);
			Dreal[40] = fmaf(3.00000000e+00 * x104, Drinvpow_3_2, Dreal[40]);
			Dreal[40] = fmaf(6.00000000e+00 * x122, Drinvpow_3_2, Dreal[40]);
			Dreal[40] = fmaf(3.00000000e+00 * x140, Drinvpow_3_2, Dreal[40]);
			Dreal[40] = fmaf(6.00000000e+00 * x302, Drinvpow_3_2, Dreal[40]);
			Dreal[40] = fmaf(6.00000000e+00 * x320, Drinvpow_3_2, Dreal[40]);
			Dreal[40] = fmaf(3.00000000e+00 * x500, Drinvpow_3_2, Dreal[40]);
			Dreal[21] = fmaf(x310, Drinvpow_4_0, Dreal[21]);
			Dreal[21] = fmaf(3.00000000e+00 * x112, Drinvpow_3_1, Dreal[21]);
			Dreal[21] = fmaf(3.00000000e+00 * x130, Drinvpow_3_1, Dreal[21]);
			Dreal[21] = fmaf(3.00000000e+00 * x310, Drinvpow_3_1, Dreal[21]);
			Dreal[39] = fmaf(x311, Drinvpow_5_0, Dreal[39]);
			Dreal[39] = fmaf(3.00000000e+00 * x113, Drinvpow_4_1, Dreal[39]);
			Dreal[39] = fmaf(3.00000000e+00 * x131, Drinvpow_4_1, Dreal[39]);
			Dreal[39] = fmaf(3.00000000e+00 * x311, Drinvpow_4_1, Dreal[39]);
			Dreal[38] = fmaf(x320, Drinvpow_5_0, Dreal[38]);
			Dreal[38] = fmaf(x302, Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(x320, Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(x500, Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(3.00000000e+00 * x122, Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(3.00000000e+00 * x140, Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(3.00000000e+00 * x320, Drinvpow_4_1, Dreal[38]);
			Dreal[38] = fmaf(3.00000000e+00 * x104, Drinvpow_3_2, Dreal[38]);
			Dreal[38] = fmaf(6.00000000e+00 * x122, Drinvpow_3_2, Dreal[38]);
			Dreal[38] = fmaf(3.00000000e+00 * x140, Drinvpow_3_2, Dreal[38]);
			Dreal[38] = fmaf(6.00000000e+00 * x302, Drinvpow_3_2, Dreal[38]);
			Dreal[38] = fmaf(6.00000000e+00 * x320, Drinvpow_3_2, Dreal[38]);
			Dreal[38] = fmaf(3.00000000e+00 * x500, Drinvpow_3_2, Dreal[38]);
			Dreal[20] = fmaf(x400, Drinvpow_4_0, Dreal[20]);
			Dreal[20] = fmaf(6.00000000e+00 * x202, Drinvpow_3_1, Dreal[20]);
			Dreal[20] = fmaf(6.00000000e+00 * x220, Drinvpow_3_1, Dreal[20]);
			Dreal[20] = fmaf(6.00000000e+00 * x400, Drinvpow_3_1, Dreal[20]);
			Dreal[20] = fmaf(3.00000000e+00 * x004, Drinvpow_2_2, Dreal[20]);
			Dreal[20] = fmaf(6.00000000e+00 * x022, Drinvpow_2_2, Dreal[20]);
			Dreal[20] = fmaf(3.00000000e+00 * x040, Drinvpow_2_2, Dreal[20]);
			Dreal[20] = fmaf(6.00000000e+00 * x202, Drinvpow_2_2, Dreal[20]);
			Dreal[20] = fmaf(6.00000000e+00 * x220, Drinvpow_2_2, Dreal[20]);
			Dreal[20] = fmaf(3.00000000e+00 * x400, Drinvpow_2_2, Dreal[20]);
			Dreal[37] = fmaf(x401, Drinvpow_5_0, Dreal[37]);
			Dreal[37] = fmaf(6.00000000e+00 * x203, Drinvpow_4_1, Dreal[37]);
			Dreal[37] = fmaf(6.00000000e+00 * x221, Drinvpow_4_1, Dreal[37]);
			Dreal[37] = fmaf(6.00000000e+00 * x401, Drinvpow_4_1, Dreal[37]);
			Dreal[37] = fmaf(3.00000000e+00 * x005, Drinvpow_3_2, Dreal[37]);
			Dreal[37] = fmaf(6.00000000e+00 * x023, Drinvpow_3_2, Dreal[37]);
			Dreal[37] = fmaf(3.00000000e+00 * x041, Drinvpow_3_2, Dreal[37]);
			Dreal[37] = fmaf(6.00000000e+00 * x203, Drinvpow_3_2, Dreal[37]);
			Dreal[37] = fmaf(6.00000000e+00 * x221, Drinvpow_3_2, Dreal[37]);
			Dreal[37] = fmaf(3.00000000e+00 * x401, Drinvpow_3_2, Dreal[37]);
			Dreal[36] = fmaf(x410, Drinvpow_5_0, Dreal[36]);
			Dreal[36] = fmaf(6.00000000e+00 * x212, Drinvpow_4_1, Dreal[36]);
			Dreal[36] = fmaf(6.00000000e+00 * x230, Drinvpow_4_1, Dreal[36]);
			Dreal[36] = fmaf(6.00000000e+00 * x410, Drinvpow_4_1, Dreal[36]);
			Dreal[36] = fmaf(3.00000000e+00 * x014, Drinvpow_3_2, Dreal[36]);
			Dreal[36] = fmaf(6.00000000e+00 * x032, Drinvpow_3_2, Dreal[36]);
			Dreal[36] = fmaf(3.00000000e+00 * x050, Drinvpow_3_2, Dreal[36]);
			Dreal[36] = fmaf(6.00000000e+00 * x212, Drinvpow_3_2, Dreal[36]);
			Dreal[36] = fmaf(6.00000000e+00 * x230, Drinvpow_3_2, Dreal[36]);
			Dreal[36] = fmaf(3.00000000e+00 * x410, Drinvpow_3_2, Dreal[36]);
			Dreal[35] = fmaf(x500, Drinvpow_5_0, Dreal[35]);
			Dreal[35] = fmaf(1.00000000e+01 * x302, Drinvpow_4_1, Dreal[35]);
			Dreal[35] = fmaf(1.00000000e+01 * x320, Drinvpow_4_1, Dreal[35]);
			Dreal[35] = fmaf(1.00000000e+01 * x500, Drinvpow_4_1, Dreal[35]);
			Dreal[35] = fmaf(1.50000000e+01 * x104, Drinvpow_3_2, Dreal[35]);
			Dreal[35] = fmaf(3.00000000e+01 * x122, Drinvpow_3_2, Dreal[35]);
			Dreal[35] = fmaf(1.50000000e+01 * x140, Drinvpow_3_2, Dreal[35]);
			Dreal[35] = fmaf(3.00000000e+01 * x302, Drinvpow_3_2, Dreal[35]);
			Dreal[35] = fmaf(3.00000000e+01 * x320, Drinvpow_3_2, Dreal[35]);
			Dreal[35] = fmaf(1.50000000e+01 * x500, Drinvpow_3_2, Dreal[35]);
		}
	}
	flops += icnt * 1044;
	const auto foursz = econst.nfour();
	for (int i = 0; i < foursz; i++) {
		const auto &h = econst.four_index(i);
		const auto& D0 = econst.four_expansion(i);
		const T hdotx = FMA(h[0], X[0], FMA(h[1], X[1], h[2] * X[2]));
		T co, so;
		sincos(T(2.0 * M_PI) * hdotx, &so, &co);
		Dfour[0] = fmaf(co, D0[0], Dfour[0]);
		Dfour[21] = fmaf(so, D0[21], Dfour[21]);
		Dfour[36] = fmaf(co, D0[36], Dfour[36]);
		Dfour[2] = fmaf(so, D0[2], Dfour[2]);
		Dfour[23] = fmaf(co, D0[23], Dfour[23]);
		Dfour[5] = fmaf(co, D0[5], Dfour[5]);
		Dfour[26] = fmaf(so, D0[26], Dfour[26]);
		Dfour[9] = fmaf(so, D0[9], Dfour[9]);
		Dfour[30] = fmaf(co, D0[30], Dfour[30]);
		Dfour[14] = fmaf(co, D0[14], Dfour[14]);
		Dfour[35] = fmaf(so, D0[35], Dfour[35]);
		Dfour[20] = fmaf(so, D0[20], Dfour[20]);
		Dfour[1] = fmaf(so, D0[1], Dfour[1]);
		Dfour[22] = fmaf(co, D0[22], Dfour[22]);
		Dfour[4] = fmaf(co, D0[4], Dfour[4]);
		Dfour[25] = fmaf(so, D0[25], Dfour[25]);
		Dfour[8] = fmaf(so, D0[8], Dfour[8]);
		Dfour[29] = fmaf(co, D0[29], Dfour[29]);
		Dfour[13] = fmaf(co, D0[13], Dfour[13]);
		Dfour[34] = fmaf(so, D0[34], Dfour[34]);
		Dfour[19] = fmaf(so, D0[19], Dfour[19]);
		Dfour[3] = fmaf(co, D0[3], Dfour[3]);
		Dfour[24] = fmaf(so, D0[24], Dfour[24]);
		Dfour[7] = fmaf(so, D0[7], Dfour[7]);
		Dfour[28] = fmaf(co, D0[28], Dfour[28]);
		Dfour[12] = fmaf(co, D0[12], Dfour[12]);
		Dfour[33] = fmaf(so, D0[33], Dfour[33]);
		Dfour[18] = fmaf(so, D0[18], Dfour[18]);
		Dfour[6] = fmaf(so, D0[6], Dfour[6]);
		Dfour[27] = fmaf(co, D0[27], Dfour[27]);
		Dfour[11] = fmaf(co, D0[11], Dfour[11]);
		Dfour[32] = fmaf(so, D0[32], Dfour[32]);
		Dfour[17] = fmaf(so, D0[17], Dfour[17]);
		Dfour[10] = fmaf(co, D0[10], Dfour[10]);
		Dfour[31] = fmaf(so, D0[31], Dfour[31]);
		Dfour[16] = fmaf(so, D0[16], Dfour[16]);
		Dfour[15] = fmaf(so, D0[15], Dfour[15]);
}
	const T& Dreal000 = Dreal[0];
	const T& Dreal001 = Dreal[3];
	const T& Dreal002 = Dreal[9];
	const T& Dreal003 = Dreal[19];
	const T& Dreal004 = Dreal[34];
	const T& Dreal005 = Dreal[55];
	const T& Dreal010 = Dreal[2];
	const T& Dreal011 = Dreal[8];
	const T& Dreal012 = Dreal[18];
	const T& Dreal013 = Dreal[33];
	const T& Dreal014 = Dreal[54];
	const T& Dreal020 = Dreal[7];
	const T& Dreal021 = Dreal[17];
	const T& Dreal022 = Dreal[32];
	const T& Dreal023 = Dreal[53];
	const T& Dreal030 = Dreal[16];
	const T& Dreal031 = Dreal[31];
	const T& Dreal032 = Dreal[52];
	const T& Dreal040 = Dreal[30];
	const T& Dreal041 = Dreal[51];
	const T& Dreal050 = Dreal[50];
	const T& Dreal100 = Dreal[1];
	const T& Dreal101 = Dreal[6];
	const T& Dreal102 = Dreal[15];
	const T& Dreal103 = Dreal[29];
	const T& Dreal104 = Dreal[49];
	const T& Dreal110 = Dreal[5];
	const T& Dreal111 = Dreal[14];
	const T& Dreal112 = Dreal[28];
	const T& Dreal113 = Dreal[48];
	const T& Dreal120 = Dreal[13];
	const T& Dreal121 = Dreal[27];
	const T& Dreal122 = Dreal[47];
	const T& Dreal130 = Dreal[26];
	const T& Dreal131 = Dreal[46];
	const T& Dreal140 = Dreal[45];
	const T& Dreal200 = Dreal[4];
	const T& Dreal201 = Dreal[12];
	const T& Dreal202 = Dreal[25];
	const T& Dreal203 = Dreal[44];
	const T& Dreal210 = Dreal[11];
	const T& Dreal211 = Dreal[24];
	const T& Dreal212 = Dreal[43];
	const T& Dreal220 = Dreal[23];
	const T& Dreal221 = Dreal[42];
	const T& Dreal230 = Dreal[41];
	const T& Dreal300 = Dreal[10];
	const T& Dreal301 = Dreal[22];
	const T& Dreal302 = Dreal[40];
	const T& Dreal310 = Dreal[21];
	const T& Dreal311 = Dreal[39];
	const T& Dreal320 = Dreal[38];
	const T& Dreal400 = Dreal[20];
	const T& Dreal401 = Dreal[37];
	const T& Dreal410 = Dreal[36];
	const T& Dreal500 = Dreal[35];
	T& D000 = D[0];
	T& D001 = D[21];
	T& D002 = D[36];
	T& D010 = D[2];
	T& D011 = D[23];
	T& D020 = D[5];
	T& D021 = D[26];
	T& D030 = D[9];
	T& D031 = D[30];
	T& D040 = D[14];
	T& D041 = D[35];
	T& D050 = D[20];
	T& D100 = D[1];
	T& D101 = D[22];
	T& D110 = D[4];
	T& D111 = D[25];
	T& D120 = D[8];
	T& D121 = D[29];
	T& D130 = D[13];
	T& D131 = D[34];
	T& D140 = D[19];
	T& D200 = D[3];
	T& D201 = D[24];
	T& D210 = D[7];
	T& D211 = D[28];
	T& D220 = D[12];
	T& D221 = D[33];
	T& D230 = D[18];
	T& D300 = D[6];
	T& D301 = D[27];
	T& D310 = D[11];
	T& D311 = D[32];
	T& D320 = D[17];
	T& D400 = D[10];
	T& D401 = D[31];
	T& D410 = D[16];
	T& D500 = D[15];
	D000 = Dreal000;
	D001 = Dreal001;
	D002 = Dreal002;
	D010 = Dreal010;
	D011 = Dreal011;
	D020 = Dreal020;
	D021 = T(-2.00000000e-01) * Dreal003;
	D021 = fmaf(T(8.00000000e-01), Dreal021, D021);
	D500 = T(1.26984127e-01) * Dreal500;
	D021 = fmaf(T(-2.00000000e-01), Dreal201, D021);
	D030 = T(-6.00000000e-01) * Dreal012;
	D030 = fmaf(T(4.00000000e-01), Dreal030, D030);
	D500 = fmaf(T(-6.34920635e-01), Dreal320, D500);
	D030 = fmaf(T(-6.00000000e-01), Dreal210, D030);
	D031 = T(-4.28571429e-01) * Dreal013;
	D031 = fmaf(T(5.71428571e-01), Dreal031, D031);
	D500 = fmaf(T(-6.34920635e-01), Dreal302, D500);
	D031 = fmaf(T(-4.28571429e-01), Dreal211, D031);
	D040 = T(8.57142857e-02) * Dreal004;
	D040 = fmaf(T(-6.85714286e-01), Dreal022, D040);
	D500 = fmaf(T(2.38095238e-01), Dreal140, D500);
	D040 = fmaf(T(2.28571429e-01), Dreal040, D040);
	D500 = fmaf(T(4.76190476e-01), Dreal122, D500);
	D500 = fmaf(T(2.38095238e-01), Dreal104, D500);
	D040 = fmaf(T(1.71428571e-01), Dreal202, D040);
	D040 = fmaf(T(-6.85714286e-01), Dreal220, D040);
	D410 = T(3.80952381e-01) * Dreal410;
	D040 = fmaf(T(8.57142857e-02), Dreal400, D040);
	D041 = T(4.76190476e-02) * Dreal005;
	D041 = fmaf(T(-5.71428571e-01), Dreal023, D041);
	D410 = fmaf(T(-5.71428571e-01), Dreal230, D410);
	D041 = fmaf(T(3.80952381e-01), Dreal041, D041);
	D410 = fmaf(T(-5.71428571e-01), Dreal212, D410);
	D410 = fmaf(T(4.76190476e-02), Dreal050, D410);
	D041 = fmaf(T(9.52380952e-02), Dreal203, D041);
	D041 = fmaf(T(-5.71428571e-01), Dreal221, D041);
	D410 = fmaf(T(9.52380952e-02), Dreal032, D410);
	D041 = fmaf(T(4.76190476e-02), Dreal401, D041);
	D050 = T(2.38095238e-01) * Dreal014;
	D050 = fmaf(T(-6.34920635e-01), Dreal032, D050);
	D410 = fmaf(T(4.76190476e-02), Dreal014, D410);
	D050 = fmaf(T(1.26984127e-01), Dreal050, D050);
	D401 = T(3.80952381e-01) * Dreal401;
	D401 = fmaf(T(-5.71428571e-01), Dreal221, D401);
	D050 = fmaf(T(4.76190476e-01), Dreal212, D050);
	D050 = fmaf(T(-6.34920635e-01), Dreal230, D050);
	D401 = fmaf(T(-5.71428571e-01), Dreal203, D401);
	D050 = fmaf(T(2.38095238e-01), Dreal410, D050);
	D100 = Dreal100;
	D101 = Dreal101;
	D110 = Dreal110;
	D111 = Dreal111;
	D120 = T(-2.00000000e-01) * Dreal102;
	D120 = fmaf(T(8.00000000e-01), Dreal120, D120);
	D401 = fmaf(T(4.76190476e-02), Dreal041, D401);
	D120 = fmaf(T(-2.00000000e-01), Dreal300, D120);
	D121 = T(-1.42857143e-01) * Dreal103;
	D121 = fmaf(T(8.57142857e-01), Dreal121, D121);
	D401 = fmaf(T(9.52380952e-02), Dreal023, D401);
	D121 = fmaf(T(-1.42857143e-01), Dreal301, D121);
	D130 = T(-4.28571429e-01) * Dreal112;
	D130 = fmaf(T(5.71428571e-01), Dreal130, D130);
	D401 = fmaf(T(4.76190476e-02), Dreal005, D401);
	D130 = fmaf(T(-4.28571429e-01), Dreal310, D130);
	D131 = T(-3.33333333e-01) * Dreal113;
	D131 = fmaf(T(6.66666667e-01), Dreal131, D131);
	D400 = T(2.28571429e-01) * Dreal400;
	D131 = fmaf(T(-3.33333333e-01), Dreal311, D131);
	D140 = T(4.76190476e-02) * Dreal104;
	D140 = fmaf(T(-5.71428571e-01), Dreal122, D140);
	D400 = fmaf(T(-6.85714286e-01), Dreal220, D400);
	D140 = fmaf(T(3.80952381e-01), Dreal140, D140);
	D400 = fmaf(T(-6.85714286e-01), Dreal202, D400);
	D400 = fmaf(T(8.57142857e-02), Dreal040, D400);
	D140 = fmaf(T(9.52380952e-02), Dreal302, D140);
	D140 = fmaf(T(-5.71428571e-01), Dreal320, D140);
	D400 = fmaf(T(1.71428571e-01), Dreal022, D400);
	D140 = fmaf(T(4.76190476e-02), Dreal500, D140);
	D200 = Dreal200;
	D201 = T(-2.00000000e-01) * Dreal003;
	D201 = fmaf(T(-2.00000000e-01), Dreal021, D201);
	D201 = fmaf(T(8.00000000e-01), Dreal201, D201);
	D400 = fmaf(T(8.57142857e-02), Dreal004, D400);
	D210 = T(-2.00000000e-01) * Dreal012;
	D210 = fmaf(T(-2.00000000e-01), Dreal030, D210);
	D210 = fmaf(T(8.00000000e-01), Dreal210, D210);
	D320 = T(-6.34920635e-02) * Dreal500;
	D211 = T(-1.42857143e-01) * Dreal013;
	D211 = fmaf(T(-1.42857143e-01), Dreal031, D211);
	D211 = fmaf(T(8.57142857e-01), Dreal211, D211);
	D320 = fmaf(T(6.50793651e-01), Dreal320, D320);
	D220 = T(2.85714286e-02) * Dreal004;
	D220 = fmaf(T(-8.57142857e-02), Dreal022, D220);
	D320 = fmaf(T(-1.58730159e-02), Dreal302, D320);
	D220 = fmaf(T(-1.14285714e-01), Dreal040, D220);
	D320 = fmaf(T(-2.85714286e-01), Dreal140, D320);
	D220 = fmaf(T(-8.57142857e-02), Dreal202, D220);
	D320 = fmaf(T(-2.38095238e-01), Dreal122, D320);
	D220 = fmaf(T(7.71428571e-01), Dreal220, D220);
	D320 = fmaf(T(4.76190476e-02), Dreal104, D320);
	D311 = T(6.66666667e-01) * Dreal311;
	D311 = fmaf(T(-3.33333333e-01), Dreal131, D311);
	D220 = fmaf(T(-1.14285714e-01), Dreal400, D220);
	D311 = fmaf(T(-3.33333333e-01), Dreal113, D311);
	D221 = T(1.58730159e-02) * Dreal005;
	D221 = fmaf(T(-7.93650794e-02), Dreal023, D221);
	D310 = T(5.71428571e-01) * Dreal310;
	D221 = fmaf(T(-9.52380952e-02), Dreal041, D221);
	D310 = fmaf(T(-4.28571429e-01), Dreal130, D310);
	D221 = fmaf(T(-7.93650794e-02), Dreal203, D221);
	D310 = fmaf(T(-4.28571429e-01), Dreal112, D310);
	D221 = fmaf(T(8.09523810e-01), Dreal221, D221);
	D301 = T(5.71428571e-01) * Dreal301;
	D301 = fmaf(T(-4.28571429e-01), Dreal103, D301);
	D301 = fmaf(T(-4.28571429e-01), Dreal121, D301);
	D221 = fmaf(T(-9.52380952e-02), Dreal401, D221);
	D300 = T(4.00000000e-01) * Dreal300;
	D230 = T(4.76190476e-02) * Dreal014;
	D230 = fmaf(T(-1.58730159e-02), Dreal032, D230);
	D300 = fmaf(T(-6.00000000e-01), Dreal120, D300);
	D230 = fmaf(T(-6.34920635e-02), Dreal050, D230);
	D300 = fmaf(T(-6.00000000e-01), Dreal102, D300);
	D230 = fmaf(T(-2.38095238e-01), Dreal212, D230);
	D230 = fmaf(T(-2.85714286e-01), Dreal410, D230);
	D230 = fmaf(T(6.50793651e-01), Dreal230, D230);
flops += 74 * foursz + 329;
	D = D + Dfour;
	expansion<T> D1;
	direct_greens_function(D1,X);
	D(0, 0, 0) = T(7.85398163e-01) + D(0, 0, 0); 
	for (int i = 0; i < LP; i++) {
	D[i] -= D1[i];
		D[i] *= zero_mask;
	}
	D[0] += 2.837291e+00 * (T(1) - zero_mask);
	if ( LORDER > 2) {
		D[3] += T(-4.18879020e+00) * (T(1) - zero_mask);
		D[5] += T(-4.18879020e+00) * (T(1) - zero_mask);
		D[LP - 1] += T(-4.18879020e+00) * (T(1) - zero_mask);
	}
	return flops;
}


template<class T>
CUDA_EXPORT
inline int interaction(tensor_trless_sym<T, 6>& L, const tensor_trless_sym<T, 5>& M, const tensor_trless_sym<T, 6>& D, bool do_phi) {
	const T& M000 =  (M[0]);
	const T& M001 =  (M[15]);
	const T& M002 =  (M[25]);
	const T M003 = -(M[18]+(M[20]));
	const T M004 =  (M[10]+fmaf(T(2),M[12],(M[14])));
	const T& M010 =  (M[2]);
	const T& M011 =  (M[17]);
	const T M012 = -(M[7]+(M[9]));
	const T M013 = -(M[22]+(M[24]));
	const T& M020 =  (M[5]);
	const T& M021 =  (M[20]);
	const T M022 = -(M[12]+(M[14]));
	const T& M030 =  (M[9]);
	const T& M031 =  (M[24]);
	const T& M040 =  (M[14]);
	const T& M100 =  (M[1]);
	const T& M101 =  (M[16]);
	const T M102 = -(M[6]+(M[8]));
	const T M103 = -(M[21]+(M[23]));
	const T& M110 =  (M[4]);
	const T& M111 =  (M[19]);
	const T M112 = -(M[11]+(M[13]));
	const T& M120 =  (M[8]);
	const T& M121 =  (M[23]);
	const T& M130 =  (M[13]);
	const T& M200 =  (M[3]);
	const T& M201 =  (M[18]);
	const T M202 = -(M[10]+(M[12]));
	const T& M210 =  (M[7]);
	const T& M211 =  (M[22]);
	const T& M220 =  (M[12]);
	const T& M300 =  (M[6]);
	const T& M301 =  (M[21]);
	const T& M310 =  (M[11]);
	const T& M400 =  (M[10]);
	const T& D000 =  (D[0]);
	const T& D001 =  (D[21]);
	const T& D002 =  (D[36]);
	const T D003 = -(D[24]+(D[26]));
	const T D004 =  (D[10]+fmaf(T(2),D[12],(D[14])));
	const T D005 =  (D[31]+fmaf(T(2),D[33],(D[35])));
	const T& D010 =  (D[2]);
	const T& D011 =  (D[23]);
	const T D012 = -(D[7]+(D[9]));
	const T D013 = -(D[28]+(D[30]));
	const T D014 =  (D[16]+fmaf(T(2),D[18],(D[20])));
	const T& D020 =  (D[5]);
	const T& D021 =  (D[26]);
	const T D022 = -(D[12]+(D[14]));
	const T D023 = -(D[33]+(D[35]));
	const T& D030 =  (D[9]);
	const T& D031 =  (D[30]);
	const T D032 = -(D[18]+(D[20]));
	const T& D040 =  (D[14]);
	const T& D041 =  (D[35]);
	const T& D050 =  (D[20]);
	const T& D100 =  (D[1]);
	const T& D101 =  (D[22]);
	const T D102 = -(D[6]+(D[8]));
	const T D103 = -(D[27]+(D[29]));
	const T D104 =  (D[15]+fmaf(T(2),D[17],(D[19])));
	const T& D110 =  (D[4]);
	const T& D111 =  (D[25]);
	const T D112 = -(D[11]+(D[13]));
	const T D113 = -(D[32]+(D[34]));
	const T& D120 =  (D[8]);
	const T& D121 =  (D[29]);
	const T D122 = -(D[17]+(D[19]));
	const T& D130 =  (D[13]);
	const T& D131 =  (D[34]);
	const T& D140 =  (D[19]);
	const T& D200 =  (D[3]);
	const T& D201 =  (D[24]);
	const T D202 = -(D[10]+(D[12]));
	const T D203 = -(D[31]+(D[33]));
	const T& D210 =  (D[7]);
	const T& D211 =  (D[28]);
	const T D212 = -(D[16]+(D[18]));
	const T& D220 =  (D[12]);
	const T& D221 =  (D[33]);
	const T& D230 =  (D[18]);
	const T& D300 =  (D[6]);
	const T& D301 =  (D[27]);
	const T D302 = -(D[15]+(D[17]));
	const T& D310 =  (D[11]);
	const T& D311 =  (D[32]);
	const T& D320 =  (D[17]);
	const T& D400 =  (D[10]);
	const T& D401 =  (D[31]);
	const T& D410 =  (D[16]);
	const T& D500 =  (D[15]);
	T& L000 = L[0];
	T& L001 = L[21];
	T& L002 = L[36];
	T& L010 = L[2];
	T& L011 = L[23];
	T& L020 = L[5];
	T& L021 = L[26];
	T& L030 = L[9];
	T& L031 = L[30];
	T& L040 = L[14];
	T& L041 = L[35];
	T& L050 = L[20];
	T& L100 = L[1];
	T& L101 = L[22];
	T& L110 = L[4];
	T& L111 = L[25];
	T& L120 = L[8];
	T& L121 = L[29];
	T& L130 = L[13];
	T& L131 = L[34];
	T& L140 = L[19];
	T& L200 = L[3];
	T& L201 = L[24];
	T& L210 = L[7];
	T& L211 = L[28];
	T& L220 = L[12];
	T& L221 = L[33];
	T& L230 = L[18];
	T& L300 = L[6];
	T& L301 = L[27];
	T& L310 = L[11];
	T& L311 = L[32];
	T& L320 = L[17];
	T& L400 = L[10];
	T& L401 = L[31];
	T& L410 = L[16];
	T& L500 = L[15];
	if( do_phi ) {
		L000 = fmaf(M000, D000, L000);
		L000 = fmaf(M001, D001, L000);
		L000 = fmaf(T(5.00000000e-01) * M002, D002, L000);
		L000 = fmaf(T(1.66666667e-01) * M003, D003, L000);
		L000 = fmaf(T(4.16666667e-02) * M004, D004, L000);
		L000 = fmaf(M010, D010, L000);
		L000 = fmaf(M011, D011, L000);
		L000 = fmaf(T(5.00000000e-01) * M012, D012, L000);
		L000 = fmaf(T(1.66666667e-01) * M013, D013, L000);
		L000 = fmaf(T(5.00000000e-01) * M020, D020, L000);
		L000 = fmaf(T(5.00000000e-01) * M021, D021, L000);
		L000 = fmaf(T(2.50000000e-01) * M022, D022, L000);
		L000 = fmaf(T(1.66666667e-01) * M030, D030, L000);
		L000 = fmaf(T(1.66666667e-01) * M031, D031, L000);
		L000 = fmaf(T(4.16666667e-02) * M040, D040, L000);
		L000 = fmaf(M100, D100, L000);
		L000 = fmaf(M101, D101, L000);
		L000 = fmaf(T(5.00000000e-01) * M102, D102, L000);
		L000 = fmaf(T(1.66666667e-01) * M103, D103, L000);
		L000 = fmaf(M110, D110, L000);
		L000 = fmaf(M111, D111, L000);
		L000 = fmaf(T(5.00000000e-01) * M112, D112, L000);
		L000 = fmaf(T(5.00000000e-01) * M120, D120, L000);
		L000 = fmaf(T(5.00000000e-01) * M121, D121, L000);
		L000 = fmaf(T(1.66666667e-01) * M130, D130, L000);
		L000 = fmaf(T(5.00000000e-01) * M200, D200, L000);
		L000 = fmaf(T(5.00000000e-01) * M201, D201, L000);
		L000 = fmaf(T(2.50000000e-01) * M202, D202, L000);
		L000 = fmaf(T(5.00000000e-01) * M210, D210, L000);
		L000 = fmaf(T(5.00000000e-01) * M211, D211, L000);
		L000 = fmaf(T(2.50000000e-01) * M220, D220, L000);
		L000 = fmaf(T(1.66666667e-01) * M300, D300, L000);
		L000 = fmaf(T(1.66666667e-01) * M301, D301, L000);
		L000 = fmaf(T(1.66666667e-01) * M310, D310, L000);
		L000 = fmaf(T(4.16666667e-02) * M400, D400, L000);
	}
	L001 = fmaf(M000, D001, L001);
	L001 = fmaf(M001, D002, L001);
	L001 = fmaf(T(5.00000000e-01) * M002, D003, L001);
	L001 = fmaf(T(1.66666667e-01) * M003, D004, L001);
	L001 = fmaf(T(4.16666667e-02) * M004, D005, L001);
	L001 = fmaf(M010, D011, L001);
	L001 = fmaf(M011, D012, L001);
	L001 = fmaf(T(5.00000000e-01) * M012, D013, L001);
	L001 = fmaf(T(1.66666667e-01) * M013, D014, L001);
	L001 = fmaf(T(5.00000000e-01) * M020, D021, L001);
	L001 = fmaf(T(5.00000000e-01) * M021, D022, L001);
	L001 = fmaf(T(2.50000000e-01) * M022, D023, L001);
	L001 = fmaf(T(1.66666667e-01) * M030, D031, L001);
	L001 = fmaf(T(1.66666667e-01) * M031, D032, L001);
	L001 = fmaf(T(4.16666667e-02) * M040, D041, L001);
	L001 = fmaf(M100, D101, L001);
	L001 = fmaf(M101, D102, L001);
	L001 = fmaf(T(5.00000000e-01) * M102, D103, L001);
	L001 = fmaf(T(1.66666667e-01) * M103, D104, L001);
	L001 = fmaf(M110, D111, L001);
	L001 = fmaf(M111, D112, L001);
	L001 = fmaf(T(5.00000000e-01) * M112, D113, L001);
	L001 = fmaf(T(5.00000000e-01) * M120, D121, L001);
	L001 = fmaf(T(5.00000000e-01) * M121, D122, L001);
	L001 = fmaf(T(1.66666667e-01) * M130, D131, L001);
	L001 = fmaf(T(5.00000000e-01) * M200, D201, L001);
	L001 = fmaf(T(5.00000000e-01) * M201, D202, L001);
	L001 = fmaf(T(2.50000000e-01) * M202, D203, L001);
	L001 = fmaf(T(5.00000000e-01) * M210, D211, L001);
	L001 = fmaf(T(5.00000000e-01) * M211, D212, L001);
	L001 = fmaf(T(2.50000000e-01) * M220, D221, L001);
	L001 = fmaf(T(1.66666667e-01) * M300, D301, L001);
	L001 = fmaf(T(1.66666667e-01) * M301, D302, L001);
	L001 = fmaf(T(1.66666667e-01) * M310, D311, L001);
	L001 = fmaf(T(4.16666667e-02) * M400, D401, L001);
	L002 = fmaf(M000, D002, L002);
	L002 = fmaf(M001, D003, L002);
	L002 = fmaf(T(5.00000000e-01) * M002, D004, L002);
	L002 = fmaf(T(1.66666667e-01) * M003, D005, L002);
	L002 = fmaf(M010, D012, L002);
	L002 = fmaf(M011, D013, L002);
	L002 = fmaf(T(5.00000000e-01) * M012, D014, L002);
	L002 = fmaf(T(5.00000000e-01) * M020, D022, L002);
	L002 = fmaf(T(5.00000000e-01) * M021, D023, L002);
	L002 = fmaf(T(1.66666667e-01) * M030, D032, L002);
	L002 = fmaf(M100, D102, L002);
	L002 = fmaf(M101, D103, L002);
	L002 = fmaf(T(5.00000000e-01) * M102, D104, L002);
	L002 = fmaf(M110, D112, L002);
	L002 = fmaf(M111, D113, L002);
	L002 = fmaf(T(5.00000000e-01) * M120, D122, L002);
	L002 = fmaf(T(5.00000000e-01) * M200, D202, L002);
	L002 = fmaf(T(5.00000000e-01) * M201, D203, L002);
	L002 = fmaf(T(5.00000000e-01) * M210, D212, L002);
	L002 = fmaf(T(1.66666667e-01) * M300, D302, L002);
	L010 = fmaf(M000, D010, L010);
	L010 = fmaf(M001, D011, L010);
	L010 = fmaf(T(5.00000000e-01) * M002, D012, L010);
	L010 = fmaf(T(1.66666667e-01) * M003, D013, L010);
	L010 = fmaf(T(4.16666667e-02) * M004, D014, L010);
	L010 = fmaf(M010, D020, L010);
	L010 = fmaf(M011, D021, L010);
	L010 = fmaf(T(5.00000000e-01) * M012, D022, L010);
	L010 = fmaf(T(1.66666667e-01) * M013, D023, L010);
	L010 = fmaf(T(5.00000000e-01) * M020, D030, L010);
	L010 = fmaf(T(5.00000000e-01) * M021, D031, L010);
	L010 = fmaf(T(2.50000000e-01) * M022, D032, L010);
	L010 = fmaf(T(1.66666667e-01) * M030, D040, L010);
	L010 = fmaf(T(1.66666667e-01) * M031, D041, L010);
	L010 = fmaf(T(4.16666667e-02) * M040, D050, L010);
	L010 = fmaf(M100, D110, L010);
	L010 = fmaf(M101, D111, L010);
	L010 = fmaf(T(5.00000000e-01) * M102, D112, L010);
	L010 = fmaf(T(1.66666667e-01) * M103, D113, L010);
	L010 = fmaf(M110, D120, L010);
	L010 = fmaf(M111, D121, L010);
	L010 = fmaf(T(5.00000000e-01) * M112, D122, L010);
	L010 = fmaf(T(5.00000000e-01) * M120, D130, L010);
	L010 = fmaf(T(5.00000000e-01) * M121, D131, L010);
	L010 = fmaf(T(1.66666667e-01) * M130, D140, L010);
	L010 = fmaf(T(5.00000000e-01) * M200, D210, L010);
	L010 = fmaf(T(5.00000000e-01) * M201, D211, L010);
	L010 = fmaf(T(2.50000000e-01) * M202, D212, L010);
	L010 = fmaf(T(5.00000000e-01) * M210, D220, L010);
	L010 = fmaf(T(5.00000000e-01) * M211, D221, L010);
	L010 = fmaf(T(2.50000000e-01) * M220, D230, L010);
	L010 = fmaf(T(1.66666667e-01) * M300, D310, L010);
	L010 = fmaf(T(1.66666667e-01) * M301, D311, L010);
	L010 = fmaf(T(1.66666667e-01) * M310, D320, L010);
	L010 = fmaf(T(4.16666667e-02) * M400, D410, L010);
	L011 = fmaf(M000, D011, L011);
	L011 = fmaf(M001, D012, L011);
	L011 = fmaf(T(5.00000000e-01) * M002, D013, L011);
	L011 = fmaf(T(1.66666667e-01) * M003, D014, L011);
	L011 = fmaf(M010, D021, L011);
	L011 = fmaf(M011, D022, L011);
	L011 = fmaf(T(5.00000000e-01) * M012, D023, L011);
	L011 = fmaf(T(5.00000000e-01) * M020, D031, L011);
	L011 = fmaf(T(5.00000000e-01) * M021, D032, L011);
	L011 = fmaf(T(1.66666667e-01) * M030, D041, L011);
	L011 = fmaf(M100, D111, L011);
	L011 = fmaf(M101, D112, L011);
	L011 = fmaf(T(5.00000000e-01) * M102, D113, L011);
	L011 = fmaf(M110, D121, L011);
	L011 = fmaf(M111, D122, L011);
	L011 = fmaf(T(5.00000000e-01) * M120, D131, L011);
	L011 = fmaf(T(5.00000000e-01) * M200, D211, L011);
	L011 = fmaf(T(5.00000000e-01) * M201, D212, L011);
	L011 = fmaf(T(5.00000000e-01) * M210, D221, L011);
	L011 = fmaf(T(1.66666667e-01) * M300, D311, L011);
	L020 = fmaf(M000, D020, L020);
	L020 = fmaf(M001, D021, L020);
	L020 = fmaf(T(5.00000000e-01) * M002, D022, L020);
	L020 = fmaf(T(1.66666667e-01) * M003, D023, L020);
	L020 = fmaf(M010, D030, L020);
	L020 = fmaf(M011, D031, L020);
	L020 = fmaf(T(5.00000000e-01) * M012, D032, L020);
	L020 = fmaf(T(5.00000000e-01) * M020, D040, L020);
	L020 = fmaf(T(5.00000000e-01) * M021, D041, L020);
	L020 = fmaf(T(1.66666667e-01) * M030, D050, L020);
	L020 = fmaf(M100, D120, L020);
	L020 = fmaf(M101, D121, L020);
	L020 = fmaf(T(5.00000000e-01) * M102, D122, L020);
	L020 = fmaf(M110, D130, L020);
	L020 = fmaf(M111, D131, L020);
	L020 = fmaf(T(5.00000000e-01) * M120, D140, L020);
	L020 = fmaf(T(5.00000000e-01) * M200, D220, L020);
	L020 = fmaf(T(5.00000000e-01) * M201, D221, L020);
	L020 = fmaf(T(5.00000000e-01) * M210, D230, L020);
	L020 = fmaf(T(1.66666667e-01) * M300, D320, L020);
	L021 = fmaf(M000, D021, L021);
	L021 = fmaf(M001, D022, L021);
	L021 = fmaf(T(5.00000000e-01) * M002, D023, L021);
	L021 = fmaf(M010, D031, L021);
	L021 = fmaf(M011, D032, L021);
	L021 = fmaf(T(5.00000000e-01) * M020, D041, L021);
	L021 = fmaf(M100, D121, L021);
	L021 = fmaf(M101, D122, L021);
	L021 = fmaf(M110, D131, L021);
	L021 = fmaf(T(5.00000000e-01) * M200, D221, L021);
	L030 = fmaf(M000, D030, L030);
	L030 = fmaf(M001, D031, L030);
	L030 = fmaf(T(5.00000000e-01) * M002, D032, L030);
	L030 = fmaf(M010, D040, L030);
	L030 = fmaf(M011, D041, L030);
	L030 = fmaf(T(5.00000000e-01) * M020, D050, L030);
	L030 = fmaf(M100, D130, L030);
	L030 = fmaf(M101, D131, L030);
	L030 = fmaf(M110, D140, L030);
	L030 = fmaf(T(5.00000000e-01) * M200, D230, L030);
	L031 = fmaf(M000, D031, L031);
	L031 = fmaf(M001, D032, L031);
	L031 = fmaf(M010, D041, L031);
	L031 = fmaf(M100, D131, L031);
	L040 = fmaf(M000, D040, L040);
	L040 = fmaf(M001, D041, L040);
	L040 = fmaf(M010, D050, L040);
	L040 = fmaf(M100, D140, L040);
	L041 = fmaf(M000, D041, L041);
	L050 = fmaf(M000, D050, L050);
	L100 = fmaf(M000, D100, L100);
	L100 = fmaf(M001, D101, L100);
	L100 = fmaf(T(5.00000000e-01) * M002, D102, L100);
	L100 = fmaf(T(1.66666667e-01) * M003, D103, L100);
	L100 = fmaf(T(4.16666667e-02) * M004, D104, L100);
	L100 = fmaf(M010, D110, L100);
	L100 = fmaf(M011, D111, L100);
	L100 = fmaf(T(5.00000000e-01) * M012, D112, L100);
	L100 = fmaf(T(1.66666667e-01) * M013, D113, L100);
	L100 = fmaf(T(5.00000000e-01) * M020, D120, L100);
	L100 = fmaf(T(5.00000000e-01) * M021, D121, L100);
	L100 = fmaf(T(2.50000000e-01) * M022, D122, L100);
	L100 = fmaf(T(1.66666667e-01) * M030, D130, L100);
	L100 = fmaf(T(1.66666667e-01) * M031, D131, L100);
	L100 = fmaf(T(4.16666667e-02) * M040, D140, L100);
	L100 = fmaf(M100, D200, L100);
	L100 = fmaf(M101, D201, L100);
	L100 = fmaf(T(5.00000000e-01) * M102, D202, L100);
	L100 = fmaf(T(1.66666667e-01) * M103, D203, L100);
	L100 = fmaf(M110, D210, L100);
	L100 = fmaf(M111, D211, L100);
	L100 = fmaf(T(5.00000000e-01) * M112, D212, L100);
	L100 = fmaf(T(5.00000000e-01) * M120, D220, L100);
	L100 = fmaf(T(5.00000000e-01) * M121, D221, L100);
	L100 = fmaf(T(1.66666667e-01) * M130, D230, L100);
	L100 = fmaf(T(5.00000000e-01) * M200, D300, L100);
	L100 = fmaf(T(5.00000000e-01) * M201, D301, L100);
	L100 = fmaf(T(2.50000000e-01) * M202, D302, L100);
	L100 = fmaf(T(5.00000000e-01) * M210, D310, L100);
	L100 = fmaf(T(5.00000000e-01) * M211, D311, L100);
	L100 = fmaf(T(2.50000000e-01) * M220, D320, L100);
	L100 = fmaf(T(1.66666667e-01) * M300, D400, L100);
	L100 = fmaf(T(1.66666667e-01) * M301, D401, L100);
	L100 = fmaf(T(1.66666667e-01) * M310, D410, L100);
	L100 = fmaf(T(4.16666667e-02) * M400, D500, L100);
	L101 = fmaf(M000, D101, L101);
	L101 = fmaf(M001, D102, L101);
	L101 = fmaf(T(5.00000000e-01) * M002, D103, L101);
	L101 = fmaf(T(1.66666667e-01) * M003, D104, L101);
	L101 = fmaf(M010, D111, L101);
	L101 = fmaf(M011, D112, L101);
	L101 = fmaf(T(5.00000000e-01) * M012, D113, L101);
	L101 = fmaf(T(5.00000000e-01) * M020, D121, L101);
	L101 = fmaf(T(5.00000000e-01) * M021, D122, L101);
	L101 = fmaf(T(1.66666667e-01) * M030, D131, L101);
	L101 = fmaf(M100, D201, L101);
	L101 = fmaf(M101, D202, L101);
	L101 = fmaf(T(5.00000000e-01) * M102, D203, L101);
	L101 = fmaf(M110, D211, L101);
	L101 = fmaf(M111, D212, L101);
	L101 = fmaf(T(5.00000000e-01) * M120, D221, L101);
	L101 = fmaf(T(5.00000000e-01) * M200, D301, L101);
	L101 = fmaf(T(5.00000000e-01) * M201, D302, L101);
	L101 = fmaf(T(5.00000000e-01) * M210, D311, L101);
	L101 = fmaf(T(1.66666667e-01) * M300, D401, L101);
	L110 = fmaf(M000, D110, L110);
	L110 = fmaf(M001, D111, L110);
	L110 = fmaf(T(5.00000000e-01) * M002, D112, L110);
	L110 = fmaf(T(1.66666667e-01) * M003, D113, L110);
	L110 = fmaf(M010, D120, L110);
	L110 = fmaf(M011, D121, L110);
	L110 = fmaf(T(5.00000000e-01) * M012, D122, L110);
	L110 = fmaf(T(5.00000000e-01) * M020, D130, L110);
	L110 = fmaf(T(5.00000000e-01) * M021, D131, L110);
	L110 = fmaf(T(1.66666667e-01) * M030, D140, L110);
	L110 = fmaf(M100, D210, L110);
	L110 = fmaf(M101, D211, L110);
	L110 = fmaf(T(5.00000000e-01) * M102, D212, L110);
	L110 = fmaf(M110, D220, L110);
	L110 = fmaf(M111, D221, L110);
	L110 = fmaf(T(5.00000000e-01) * M120, D230, L110);
	L110 = fmaf(T(5.00000000e-01) * M200, D310, L110);
	L110 = fmaf(T(5.00000000e-01) * M201, D311, L110);
	L110 = fmaf(T(5.00000000e-01) * M210, D320, L110);
	L110 = fmaf(T(1.66666667e-01) * M300, D410, L110);
	L111 = fmaf(M000, D111, L111);
	L111 = fmaf(M001, D112, L111);
	L111 = fmaf(T(5.00000000e-01) * M002, D113, L111);
	L111 = fmaf(M010, D121, L111);
	L111 = fmaf(M011, D122, L111);
	L111 = fmaf(T(5.00000000e-01) * M020, D131, L111);
	L111 = fmaf(M100, D211, L111);
	L111 = fmaf(M101, D212, L111);
	L111 = fmaf(M110, D221, L111);
	L111 = fmaf(T(5.00000000e-01) * M200, D311, L111);
	L120 = fmaf(M000, D120, L120);
	L120 = fmaf(M001, D121, L120);
	L120 = fmaf(T(5.00000000e-01) * M002, D122, L120);
	L120 = fmaf(M010, D130, L120);
	L120 = fmaf(M011, D131, L120);
	L120 = fmaf(T(5.00000000e-01) * M020, D140, L120);
	L120 = fmaf(M100, D220, L120);
	L120 = fmaf(M101, D221, L120);
	L120 = fmaf(M110, D230, L120);
	L120 = fmaf(T(5.00000000e-01) * M200, D320, L120);
	L121 = fmaf(M000, D121, L121);
	L121 = fmaf(M001, D122, L121);
	L121 = fmaf(M010, D131, L121);
	L121 = fmaf(M100, D221, L121);
	L130 = fmaf(M000, D130, L130);
	L130 = fmaf(M001, D131, L130);
	L130 = fmaf(M010, D140, L130);
	L130 = fmaf(M100, D230, L130);
	L131 = fmaf(M000, D131, L131);
	L140 = fmaf(M000, D140, L140);
	L200 = fmaf(M000, D200, L200);
	L200 = fmaf(M001, D201, L200);
	L200 = fmaf(T(5.00000000e-01) * M002, D202, L200);
	L200 = fmaf(T(1.66666667e-01) * M003, D203, L200);
	L200 = fmaf(M010, D210, L200);
	L200 = fmaf(M011, D211, L200);
	L200 = fmaf(T(5.00000000e-01) * M012, D212, L200);
	L200 = fmaf(T(5.00000000e-01) * M020, D220, L200);
	L200 = fmaf(T(5.00000000e-01) * M021, D221, L200);
	L200 = fmaf(T(1.66666667e-01) * M030, D230, L200);
	L200 = fmaf(M100, D300, L200);
	L200 = fmaf(M101, D301, L200);
	L200 = fmaf(T(5.00000000e-01) * M102, D302, L200);
	L200 = fmaf(M110, D310, L200);
	L200 = fmaf(M111, D311, L200);
	L200 = fmaf(T(5.00000000e-01) * M120, D320, L200);
	L200 = fmaf(T(5.00000000e-01) * M200, D400, L200);
	L200 = fmaf(T(5.00000000e-01) * M201, D401, L200);
	L200 = fmaf(T(5.00000000e-01) * M210, D410, L200);
	L200 = fmaf(T(1.66666667e-01) * M300, D500, L200);
	L201 = fmaf(M000, D201, L201);
	L201 = fmaf(M001, D202, L201);
	L201 = fmaf(T(5.00000000e-01) * M002, D203, L201);
	L201 = fmaf(M010, D211, L201);
	L201 = fmaf(M011, D212, L201);
	L201 = fmaf(T(5.00000000e-01) * M020, D221, L201);
	L201 = fmaf(M100, D301, L201);
	L201 = fmaf(M101, D302, L201);
	L201 = fmaf(M110, D311, L201);
	L201 = fmaf(T(5.00000000e-01) * M200, D401, L201);
	L210 = fmaf(M000, D210, L210);
	L210 = fmaf(M001, D211, L210);
	L210 = fmaf(T(5.00000000e-01) * M002, D212, L210);
	L210 = fmaf(M010, D220, L210);
	L210 = fmaf(M011, D221, L210);
	L210 = fmaf(T(5.00000000e-01) * M020, D230, L210);
	L210 = fmaf(M100, D310, L210);
	L210 = fmaf(M101, D311, L210);
	L210 = fmaf(M110, D320, L210);
	L210 = fmaf(T(5.00000000e-01) * M200, D410, L210);
	L211 = fmaf(M000, D211, L211);
	L211 = fmaf(M001, D212, L211);
	L211 = fmaf(M010, D221, L211);
	L211 = fmaf(M100, D311, L211);
	L220 = fmaf(M000, D220, L220);
	L220 = fmaf(M001, D221, L220);
	L220 = fmaf(M010, D230, L220);
	L220 = fmaf(M100, D320, L220);
	L221 = fmaf(M000, D221, L221);
	L230 = fmaf(M000, D230, L230);
	L300 = fmaf(M000, D300, L300);
	L300 = fmaf(M001, D301, L300);
	L300 = fmaf(T(5.00000000e-01) * M002, D302, L300);
	L300 = fmaf(M010, D310, L300);
	L300 = fmaf(M011, D311, L300);
	L300 = fmaf(T(5.00000000e-01) * M020, D320, L300);
	L300 = fmaf(M100, D400, L300);
	L300 = fmaf(M101, D401, L300);
	L300 = fmaf(M110, D410, L300);
	L300 = fmaf(T(5.00000000e-01) * M200, D500, L300);
	L301 = fmaf(M000, D301, L301);
	L301 = fmaf(M001, D302, L301);
	L301 = fmaf(M010, D311, L301);
	L301 = fmaf(M100, D401, L301);
	L310 = fmaf(M000, D310, L310);
	L310 = fmaf(M001, D311, L310);
	L310 = fmaf(M010, D320, L310);
	L310 = fmaf(M100, D410, L310);
	L311 = fmaf(M000, D311, L311);
	L320 = fmaf(M000, D320, L320);
	L400 = fmaf(M000, D400, L400);
	L400 = fmaf(M001, D401, L400);
	L400 = fmaf(M010, D410, L400);
	L400 = fmaf(M100, D500, L400);
	L401 = fmaf(M000, D401, L401);
	L410 = fmaf(M000, D410, L410);
	L500 = fmaf(M000, D500, L500);
	return 919 + do_phi * 97;
}


template<class T>
CUDA_EXPORT
inline int interaction(tensor_trless_sym<T, 2>& L, const tensor_trless_sym<T, 5>& M, const tensor_trless_sym<T, 6>& D, bool do_phi) {
	const T& M000 =  (M[0]);
	const T& M001 =  (M[15]);
	const T& M002 =  (M[25]);
	const T M003 = -(M[18]+(M[20]));
	const T M004 =  (M[10]+fmaf(T(2),M[12],(M[14])));
	const T& M010 =  (M[2]);
	const T& M011 =  (M[17]);
	const T M012 = -(M[7]+(M[9]));
	const T M013 = -(M[22]+(M[24]));
	const T& M020 =  (M[5]);
	const T& M021 =  (M[20]);
	const T M022 = -(M[12]+(M[14]));
	const T& M030 =  (M[9]);
	const T& M031 =  (M[24]);
	const T& M040 =  (M[14]);
	const T& M100 =  (M[1]);
	const T& M101 =  (M[16]);
	const T M102 = -(M[6]+(M[8]));
	const T M103 = -(M[21]+(M[23]));
	const T& M110 =  (M[4]);
	const T& M111 =  (M[19]);
	const T M112 = -(M[11]+(M[13]));
	const T& M120 =  (M[8]);
	const T& M121 =  (M[23]);
	const T& M130 =  (M[13]);
	const T& M200 =  (M[3]);
	const T& M201 =  (M[18]);
	const T M202 = -(M[10]+(M[12]));
	const T& M210 =  (M[7]);
	const T& M211 =  (M[22]);
	const T& M220 =  (M[12]);
	const T& M300 =  (M[6]);
	const T& M301 =  (M[21]);
	const T& M310 =  (M[11]);
	const T& M400 =  (M[10]);
	const T& D000 =  (D[0]);
	const T& D001 =  (D[21]);
	const T& D002 =  (D[36]);
	const T D003 = -(D[24]+(D[26]));
	const T D004 =  (D[10]+fmaf(T(2),D[12],(D[14])));
	const T D005 =  (D[31]+fmaf(T(2),D[33],(D[35])));
	const T& D010 =  (D[2]);
	const T& D011 =  (D[23]);
	const T D012 = -(D[7]+(D[9]));
	const T D013 = -(D[28]+(D[30]));
	const T D014 =  (D[16]+fmaf(T(2),D[18],(D[20])));
	const T& D020 =  (D[5]);
	const T& D021 =  (D[26]);
	const T D022 = -(D[12]+(D[14]));
	const T D023 = -(D[33]+(D[35]));
	const T& D030 =  (D[9]);
	const T& D031 =  (D[30]);
	const T D032 = -(D[18]+(D[20]));
	const T& D040 =  (D[14]);
	const T& D041 =  (D[35]);
	const T& D050 =  (D[20]);
	const T& D100 =  (D[1]);
	const T& D101 =  (D[22]);
	const T D102 = -(D[6]+(D[8]));
	const T D103 = -(D[27]+(D[29]));
	const T D104 =  (D[15]+fmaf(T(2),D[17],(D[19])));
	const T& D110 =  (D[4]);
	const T& D111 =  (D[25]);
	const T D112 = -(D[11]+(D[13]));
	const T D113 = -(D[32]+(D[34]));
	const T& D120 =  (D[8]);
	const T& D121 =  (D[29]);
	const T D122 = -(D[17]+(D[19]));
	const T& D130 =  (D[13]);
	const T& D131 =  (D[34]);
	const T& D140 =  (D[19]);
	const T& D200 =  (D[3]);
	const T& D201 =  (D[24]);
	const T D202 = -(D[10]+(D[12]));
	const T D203 = -(D[31]+(D[33]));
	const T& D210 =  (D[7]);
	const T& D211 =  (D[28]);
	const T D212 = -(D[16]+(D[18]));
	const T& D220 =  (D[12]);
	const T& D221 =  (D[33]);
	const T& D230 =  (D[18]);
	const T& D300 =  (D[6]);
	const T& D301 =  (D[27]);
	const T D302 = -(D[15]+(D[17]));
	const T& D310 =  (D[11]);
	const T& D311 =  (D[32]);
	const T& D320 =  (D[17]);
	const T& D400 =  (D[10]);
	const T& D401 =  (D[31]);
	const T& D410 =  (D[16]);
	const T& D500 =  (D[15]);
	T& L000 = L[0];
	T& L001 = L[3];
	T& L010 = L[2];
	T& L100 = L[1];
	if( do_phi ) {
		L000 = fmaf(M000, D000, L000);
		L000 = fmaf(M001, D001, L000);
		L000 = fmaf(T(5.00000000e-01) * M002, D002, L000);
		L000 = fmaf(T(1.66666667e-01) * M003, D003, L000);
		L000 = fmaf(T(4.16666667e-02) * M004, D004, L000);
		L000 = fmaf(M010, D010, L000);
		L000 = fmaf(M011, D011, L000);
		L000 = fmaf(T(5.00000000e-01) * M012, D012, L000);
		L000 = fmaf(T(1.66666667e-01) * M013, D013, L000);
		L000 = fmaf(T(5.00000000e-01) * M020, D020, L000);
		L000 = fmaf(T(5.00000000e-01) * M021, D021, L000);
		L000 = fmaf(T(2.50000000e-01) * M022, D022, L000);
		L000 = fmaf(T(1.66666667e-01) * M030, D030, L000);
		L000 = fmaf(T(1.66666667e-01) * M031, D031, L000);
		L000 = fmaf(T(4.16666667e-02) * M040, D040, L000);
		L000 = fmaf(M100, D100, L000);
		L000 = fmaf(M101, D101, L000);
		L000 = fmaf(T(5.00000000e-01) * M102, D102, L000);
		L000 = fmaf(T(1.66666667e-01) * M103, D103, L000);
		L000 = fmaf(M110, D110, L000);
		L000 = fmaf(M111, D111, L000);
		L000 = fmaf(T(5.00000000e-01) * M112, D112, L000);
		L000 = fmaf(T(5.00000000e-01) * M120, D120, L000);
		L000 = fmaf(T(5.00000000e-01) * M121, D121, L000);
		L000 = fmaf(T(1.66666667e-01) * M130, D130, L000);
		L000 = fmaf(T(5.00000000e-01) * M200, D200, L000);
		L000 = fmaf(T(5.00000000e-01) * M201, D201, L000);
		L000 = fmaf(T(2.50000000e-01) * M202, D202, L000);
		L000 = fmaf(T(5.00000000e-01) * M210, D210, L000);
		L000 = fmaf(T(5.00000000e-01) * M211, D211, L000);
		L000 = fmaf(T(2.50000000e-01) * M220, D220, L000);
		L000 = fmaf(T(1.66666667e-01) * M300, D300, L000);
		L000 = fmaf(T(1.66666667e-01) * M301, D301, L000);
		L000 = fmaf(T(1.66666667e-01) * M310, D310, L000);
		L000 = fmaf(T(4.16666667e-02) * M400, D400, L000);
	}
	L001 = fmaf(M000, D001, L001);
	L001 = fmaf(M001, D002, L001);
	L001 = fmaf(T(5.00000000e-01) * M002, D003, L001);
	L001 = fmaf(T(1.66666667e-01) * M003, D004, L001);
	L001 = fmaf(T(4.16666667e-02) * M004, D005, L001);
	L001 = fmaf(M010, D011, L001);
	L001 = fmaf(M011, D012, L001);
	L001 = fmaf(T(5.00000000e-01) * M012, D013, L001);
	L001 = fmaf(T(1.66666667e-01) * M013, D014, L001);
	L001 = fmaf(T(5.00000000e-01) * M020, D021, L001);
	L001 = fmaf(T(5.00000000e-01) * M021, D022, L001);
	L001 = fmaf(T(2.50000000e-01) * M022, D023, L001);
	L001 = fmaf(T(1.66666667e-01) * M030, D031, L001);
	L001 = fmaf(T(1.66666667e-01) * M031, D032, L001);
	L001 = fmaf(T(4.16666667e-02) * M040, D041, L001);
	L001 = fmaf(M100, D101, L001);
	L001 = fmaf(M101, D102, L001);
	L001 = fmaf(T(5.00000000e-01) * M102, D103, L001);
	L001 = fmaf(T(1.66666667e-01) * M103, D104, L001);
	L001 = fmaf(M110, D111, L001);
	L001 = fmaf(M111, D112, L001);
	L001 = fmaf(T(5.00000000e-01) * M112, D113, L001);
	L001 = fmaf(T(5.00000000e-01) * M120, D121, L001);
	L001 = fmaf(T(5.00000000e-01) * M121, D122, L001);
	L001 = fmaf(T(1.66666667e-01) * M130, D131, L001);
	L001 = fmaf(T(5.00000000e-01) * M200, D201, L001);
	L001 = fmaf(T(5.00000000e-01) * M201, D202, L001);
	L001 = fmaf(T(2.50000000e-01) * M202, D203, L001);
	L001 = fmaf(T(5.00000000e-01) * M210, D211, L001);
	L001 = fmaf(T(5.00000000e-01) * M211, D212, L001);
	L001 = fmaf(T(2.50000000e-01) * M220, D221, L001);
	L001 = fmaf(T(1.66666667e-01) * M300, D301, L001);
	L001 = fmaf(T(1.66666667e-01) * M301, D302, L001);
	L001 = fmaf(T(1.66666667e-01) * M310, D311, L001);
	L001 = fmaf(T(4.16666667e-02) * M400, D401, L001);
	L010 = fmaf(M000, D010, L010);
	L010 = fmaf(M001, D011, L010);
	L010 = fmaf(T(5.00000000e-01) * M002, D012, L010);
	L010 = fmaf(T(1.66666667e-01) * M003, D013, L010);
	L010 = fmaf(T(4.16666667e-02) * M004, D014, L010);
	L010 = fmaf(M010, D020, L010);
	L010 = fmaf(M011, D021, L010);
	L010 = fmaf(T(5.00000000e-01) * M012, D022, L010);
	L010 = fmaf(T(1.66666667e-01) * M013, D023, L010);
	L010 = fmaf(T(5.00000000e-01) * M020, D030, L010);
	L010 = fmaf(T(5.00000000e-01) * M021, D031, L010);
	L010 = fmaf(T(2.50000000e-01) * M022, D032, L010);
	L010 = fmaf(T(1.66666667e-01) * M030, D040, L010);
	L010 = fmaf(T(1.66666667e-01) * M031, D041, L010);
	L010 = fmaf(T(4.16666667e-02) * M040, D050, L010);
	L010 = fmaf(M100, D110, L010);
	L010 = fmaf(M101, D111, L010);
	L010 = fmaf(T(5.00000000e-01) * M102, D112, L010);
	L010 = fmaf(T(1.66666667e-01) * M103, D113, L010);
	L010 = fmaf(M110, D120, L010);
	L010 = fmaf(M111, D121, L010);
	L010 = fmaf(T(5.00000000e-01) * M112, D122, L010);
	L010 = fmaf(T(5.00000000e-01) * M120, D130, L010);
	L010 = fmaf(T(5.00000000e-01) * M121, D131, L010);
	L010 = fmaf(T(1.66666667e-01) * M130, D140, L010);
	L010 = fmaf(T(5.00000000e-01) * M200, D210, L010);
	L010 = fmaf(T(5.00000000e-01) * M201, D211, L010);
	L010 = fmaf(T(2.50000000e-01) * M202, D212, L010);
	L010 = fmaf(T(5.00000000e-01) * M210, D220, L010);
	L010 = fmaf(T(5.00000000e-01) * M211, D221, L010);
	L010 = fmaf(T(2.50000000e-01) * M220, D230, L010);
	L010 = fmaf(T(1.66666667e-01) * M300, D310, L010);
	L010 = fmaf(T(1.66666667e-01) * M301, D311, L010);
	L010 = fmaf(T(1.66666667e-01) * M310, D320, L010);
	L010 = fmaf(T(4.16666667e-02) * M400, D410, L010);
	L100 = fmaf(M000, D100, L100);
	L100 = fmaf(M001, D101, L100);
	L100 = fmaf(T(5.00000000e-01) * M002, D102, L100);
	L100 = fmaf(T(1.66666667e-01) * M003, D103, L100);
	L100 = fmaf(T(4.16666667e-02) * M004, D104, L100);
	L100 = fmaf(M010, D110, L100);
	L100 = fmaf(M011, D111, L100);
	L100 = fmaf(T(5.00000000e-01) * M012, D112, L100);
	L100 = fmaf(T(1.66666667e-01) * M013, D113, L100);
	L100 = fmaf(T(5.00000000e-01) * M020, D120, L100);
	L100 = fmaf(T(5.00000000e-01) * M021, D121, L100);
	L100 = fmaf(T(2.50000000e-01) * M022, D122, L100);
	L100 = fmaf(T(1.66666667e-01) * M030, D130, L100);
	L100 = fmaf(T(1.66666667e-01) * M031, D131, L100);
	L100 = fmaf(T(4.16666667e-02) * M040, D140, L100);
	L100 = fmaf(M100, D200, L100);
	L100 = fmaf(M101, D201, L100);
	L100 = fmaf(T(5.00000000e-01) * M102, D202, L100);
	L100 = fmaf(T(1.66666667e-01) * M103, D203, L100);
	L100 = fmaf(M110, D210, L100);
	L100 = fmaf(M111, D211, L100);
	L100 = fmaf(T(5.00000000e-01) * M112, D212, L100);
	L100 = fmaf(T(5.00000000e-01) * M120, D220, L100);
	L100 = fmaf(T(5.00000000e-01) * M121, D221, L100);
	L100 = fmaf(T(1.66666667e-01) * M130, D230, L100);
	L100 = fmaf(T(5.00000000e-01) * M200, D300, L100);
	L100 = fmaf(T(5.00000000e-01) * M201, D301, L100);
	L100 = fmaf(T(2.50000000e-01) * M202, D302, L100);
	L100 = fmaf(T(5.00000000e-01) * M210, D310, L100);
	L100 = fmaf(T(5.00000000e-01) * M211, D311, L100);
	L100 = fmaf(T(2.50000000e-01) * M220, D320, L100);
	L100 = fmaf(T(1.66666667e-01) * M300, D400, L100);
	L100 = fmaf(T(1.66666667e-01) * M301, D401, L100);
	L100 = fmaf(T(1.66666667e-01) * M310, D410, L100);
	L100 = fmaf(T(4.16666667e-02) * M400, D500, L100);
	return 352 + do_phi * 97;
}


template<class T>
CUDA_EXPORT
tensor_trless_sym<T, 5> monopole_translate(array<T, NDIM>& X) {
	tensor_trless_sym<T, 5> M;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	T& M000 = M[0];
	T& M001 = M[15];
	T& M002 = M[25];
	T& M010 = M[2];
	T& M011 = M[17];
	T& M020 = M[5];
	T& M021 = M[20];
	T& M030 = M[9];
	T& M031 = M[24];
	T& M040 = M[14];
	T& M100 = M[1];
	T& M101 = M[16];
	T& M110 = M[4];
	T& M111 = M[19];
	T& M120 = M[8];
	T& M121 = M[23];
	T& M130 = M[13];
	T& M200 = M[3];
	T& M201 = M[18];
	T& M210 = M[7];
	T& M211 = M[22];
	T& M220 = M[12];
	T& M300 = M[6];
	T& M301 = M[21];
	T& M310 = M[11];
	T& M400 = M[10];
	const T x000 = T(1);
	const T& x100 = X[0];
	const T& x010 = X[1];
	const T& x001 = X[2];
	const T x002 = x001 * x001;
	const T x011 = x010 * x001;
	const T x020 = x010 * x010;
	const T x101 = x100 * x001;
	const T x110 = x100 * x010;
	const T x200 = x100 * x100;
	const T x003 = x002 * x001;
	const T x012 = x011 * x001;
	const T x021 = x011 * x010;
	const T x030 = x020 * x010;
	const T x102 = x101 * x001;
	const T x111 = x110 * x001;
	const T x120 = x110 * x010;
	const T x201 = x101 * x100;
	const T x210 = x110 * x100;
	const T x300 = x200 * x100;
	const T x004 = x002 * x002;
	const T x013 = x011 * x002;
	const T x022 = x011 * x011;
	const T x031 = x011 * x020;
	const T x040 = x020 * x020;
	const T x103 = x101 * x002;
	const T x112 = x110 * x002;
	const T x121 = x110 * x011;
	const T x130 = x110 * x020;
	const T x202 = x101 * x101;
	const T x211 = x110 * x101;
	const T x220 = x110 * x110;
	const T x301 = x101 * x200;
	const T x310 = x110 * x200;
	const T x400 = x200 * x200;
	M000 = x000;
	M001 = x001;
	M002 = x002;
	M010 = x010;
	M011 = x011;
	M020 = x020;
	M021 = T(-2.00000000e-01) * x003;
	M021 = fmaf(T(8.00000000e-01), x021, M021);
	M400 = T(2.28571429e-01) * x400;
	M021 = fmaf(T(-2.00000000e-01), x201, M021);
	M030 = T(-6.00000000e-01) * x012;
	M030 = fmaf(T(4.00000000e-01), x030, M030);
	M400 = fmaf(T(-6.85714286e-01), x220, M400);
	M030 = fmaf(T(-6.00000000e-01), x210, M030);
	M031 = T(-4.28571429e-01) * x013;
	M031 = fmaf(T(5.71428571e-01), x031, M031);
	M400 = fmaf(T(-6.85714286e-01), x202, M400);
	M031 = fmaf(T(-4.28571429e-01), x211, M031);
	M040 = T(8.57142857e-02) * x004;
	M040 = fmaf(T(-6.85714286e-01), x022, M040);
	M400 = fmaf(T(8.57142857e-02), x040, M400);
	M040 = fmaf(T(2.28571429e-01), x040, M040);
	M400 = fmaf(T(1.71428571e-01), x022, M400);
	M400 = fmaf(T(8.57142857e-02), x004, M400);
	M040 = fmaf(T(1.71428571e-01), x202, M040);
	M040 = fmaf(T(-6.85714286e-01), x220, M040);
	M310 = T(5.71428571e-01) * x310;
	M040 = fmaf(T(8.57142857e-02), x400, M040);
	M100 = x100;
	M101 = x101;
	M110 = x110;
	M111 = x111;
	M120 = T(-2.00000000e-01) * x102;
	M120 = fmaf(T(8.00000000e-01), x120, M120);
	M310 = fmaf(T(-4.28571429e-01), x130, M310);
	M120 = fmaf(T(-2.00000000e-01), x300, M120);
	M121 = T(-1.42857143e-01) * x103;
	M121 = fmaf(T(8.57142857e-01), x121, M121);
	M310 = fmaf(T(-4.28571429e-01), x112, M310);
	M121 = fmaf(T(-1.42857143e-01), x301, M121);
	M130 = T(-4.28571429e-01) * x112;
	M130 = fmaf(T(5.71428571e-01), x130, M130);
	M301 = T(5.71428571e-01) * x301;
	M130 = fmaf(T(-4.28571429e-01), x310, M130);
	M200 = x200;
	M201 = T(-2.00000000e-01) * x003;
	M201 = fmaf(T(-2.00000000e-01), x021, M201);
	M201 = fmaf(T(8.00000000e-01), x201, M201);
	M301 = fmaf(T(-4.28571429e-01), x121, M301);
	M210 = T(-2.00000000e-01) * x012;
	M210 = fmaf(T(-2.00000000e-01), x030, M210);
	M210 = fmaf(T(8.00000000e-01), x210, M210);
	M301 = fmaf(T(-4.28571429e-01), x103, M301);
	M211 = T(-1.42857143e-01) * x013;
	M211 = fmaf(T(-1.42857143e-01), x031, M211);
	M211 = fmaf(T(8.57142857e-01), x211, M211);
	M300 = T(4.00000000e-01) * x300;
	M220 = T(2.85714286e-02) * x004;
	M220 = fmaf(T(-8.57142857e-02), x022, M220);
	M300 = fmaf(T(-6.00000000e-01), x120, M300);
	M220 = fmaf(T(-1.14285714e-01), x040, M220);
	M300 = fmaf(T(-6.00000000e-01), x102, M300);
	M220 = fmaf(T(-8.57142857e-02), x202, M220);
	M220 = fmaf(T(-1.14285714e-01), x400, M220);
	M220 = fmaf(T(7.71428571e-01), x220, M220);
	return M;
/* FLOPS = 127*/
}


template<class T>
CUDA_EXPORT
tensor_trless_sym<T, 5> multipole_translate(const tensor_trless_sym<T,5>& Ma, array<T, NDIM>& X) {
	tensor_sym<T, 5> Mb;
	tensor_trless_sym<T, 5> Mc;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	const T& Ma000 =  (Ma[0]);
	const T& Ma001 =  (Ma[15]);
	const T& Ma002 =  (Ma[25]);
	const T Ma003 = -(Ma[18]+(Ma[20]));
	const T Ma004 =  (Ma[10]+fmaf(T(2),Ma[12],(Ma[14])));
	const T& Ma010 =  (Ma[2]);
	const T& Ma011 =  (Ma[17]);
	const T Ma012 = -(Ma[7]+(Ma[9]));
	const T Ma013 = -(Ma[22]+(Ma[24]));
	const T& Ma020 =  (Ma[5]);
	const T& Ma021 =  (Ma[20]);
	const T Ma022 = -(Ma[12]+(Ma[14]));
	const T& Ma030 =  (Ma[9]);
	const T& Ma031 =  (Ma[24]);
	const T& Ma040 =  (Ma[14]);
	const T& Ma100 =  (Ma[1]);
	const T& Ma101 =  (Ma[16]);
	const T Ma102 = -(Ma[6]+(Ma[8]));
	const T Ma103 = -(Ma[21]+(Ma[23]));
	const T& Ma110 =  (Ma[4]);
	const T& Ma111 =  (Ma[19]);
	const T Ma112 = -(Ma[11]+(Ma[13]));
	const T& Ma120 =  (Ma[8]);
	const T& Ma121 =  (Ma[23]);
	const T& Ma130 =  (Ma[13]);
	const T& Ma200 =  (Ma[3]);
	const T& Ma201 =  (Ma[18]);
	const T Ma202 = -(Ma[10]+(Ma[12]));
	const T& Ma210 =  (Ma[7]);
	const T& Ma211 =  (Ma[22]);
	const T& Ma220 =  (Ma[12]);
	const T& Ma300 =  (Ma[6]);
	const T& Ma301 =  (Ma[21]);
	const T& Ma310 =  (Ma[11]);
	const T& Ma400 =  (Ma[10]);
	const T& Mb000 = Mb[0];
	const T& Mb001 = Mb[3];
	const T& Mb002 = Mb[9];
	const T& Mb003 = Mb[19];
	const T& Mb004 = Mb[34];
	const T& Mb010 = Mb[2];
	const T& Mb011 = Mb[8];
	const T& Mb012 = Mb[18];
	const T& Mb013 = Mb[33];
	const T& Mb020 = Mb[7];
	const T& Mb021 = Mb[17];
	const T& Mb022 = Mb[32];
	const T& Mb030 = Mb[16];
	const T& Mb031 = Mb[31];
	const T& Mb040 = Mb[30];
	const T& Mb100 = Mb[1];
	const T& Mb101 = Mb[6];
	const T& Mb102 = Mb[15];
	const T& Mb103 = Mb[29];
	const T& Mb110 = Mb[5];
	const T& Mb111 = Mb[14];
	const T& Mb112 = Mb[28];
	const T& Mb120 = Mb[13];
	const T& Mb121 = Mb[27];
	const T& Mb130 = Mb[26];
	const T& Mb200 = Mb[4];
	const T& Mb201 = Mb[12];
	const T& Mb202 = Mb[25];
	const T& Mb210 = Mb[11];
	const T& Mb211 = Mb[24];
	const T& Mb220 = Mb[23];
	const T& Mb300 = Mb[10];
	const T& Mb301 = Mb[22];
	const T& Mb310 = Mb[21];
	const T& Mb400 = Mb[20];
	T& Mc000 = Mc[0];
	T& Mc001 = Mc[15];
	T& Mc002 = Mc[25];
	T& Mc010 = Mc[2];
	T& Mc011 = Mc[17];
	T& Mc020 = Mc[5];
	T& Mc021 = Mc[20];
	T& Mc030 = Mc[9];
	T& Mc031 = Mc[24];
	T& Mc040 = Mc[14];
	T& Mc100 = Mc[1];
	T& Mc101 = Mc[16];
	T& Mc110 = Mc[4];
	T& Mc111 = Mc[19];
	T& Mc120 = Mc[8];
	T& Mc121 = Mc[23];
	T& Mc130 = Mc[13];
	T& Mc200 = Mc[3];
	T& Mc201 = Mc[18];
	T& Mc210 = Mc[7];
	T& Mc211 = Mc[22];
	T& Mc220 = Mc[12];
	T& Mc300 = Mc[6];
	T& Mc301 = Mc[21];
	T& Mc310 = Mc[11];
	T& Mc400 = Mc[10];
	const T x000 = T(1);
	const T& x100 = X[0];
	const T& x010 = X[1];
	const T& x001 = X[2];
	const T x002 = x001 * x001;
	const T x011 = x010 * x001;
	const T x020 = x010 * x010;
	const T x101 = x100 * x001;
	const T x110 = x100 * x010;
	const T x200 = x100 * x100;
	const T x003 = x002 * x001;
	const T x012 = x011 * x001;
	const T x021 = x011 * x010;
	const T x030 = x020 * x010;
	const T x102 = x101 * x001;
	const T x111 = x110 * x001;
	const T x120 = x110 * x010;
	const T x201 = x101 * x100;
	const T x210 = x110 * x100;
	const T x300 = x200 * x100;
	const T x004 = x002 * x002;
	const T x013 = x011 * x002;
	const T x022 = x011 * x011;
	const T x031 = x011 * x020;
	const T x040 = x020 * x020;
	const T x103 = x101 * x002;
	const T x112 = x110 * x002;
	const T x121 = x110 * x011;
	const T x130 = x110 * x020;
	const T x202 = x101 * x101;
	const T x211 = x110 * x101;
	const T x220 = x110 * x110;
	const T x301 = x101 * x200;
	const T x310 = x110 * x200;
	const T x400 = x200 * x200;
	Mb[0] = Ma000;
	Mb[3] = Ma001;
	Mb[9] = Ma002;
	Mb[19] = Ma003;
	Mb[34] = Ma004;
	Mb[2] = Ma010;
	Mb[8] = Ma011;
	Mb[18] = Ma012;
	Mb[33] = Ma013;
	Mb[7] = Ma020;
	Mb[17] = Ma021;
	Mb[32] = Ma022;
	Mb[16] = Ma030;
	Mb[31] = Ma031;
	Mb[30] = Ma040;
	Mb[1] = Ma100;
	Mb[6] = Ma101;
	Mb[15] = Ma102;
	Mb[29] = Ma103;
	Mb[5] = Ma110;
	Mb[14] = Ma111;
	Mb[28] = Ma112;
	Mb[13] = Ma120;
	Mb[27] = Ma121;
	Mb[26] = Ma130;
	Mb[4] = Ma200;
	Mb[12] = Ma201;
	Mb[25] = Ma202;
	Mb[11] = Ma210;
	Mb[24] = Ma211;
	Mb[23] = Ma220;
	Mb[10] = Ma300;
	Mb[22] = Ma301;
	Mb[21] = Ma310;
	Mb[20] = Ma400;
	Mb[34] = fmaf( x004, Mb[0], Mb[34]);
	Mb[34] = fmaf(T(4.00000000e+00) * x003, Mb[3], Mb[34]);
	Mb[34] = fmaf(T(6.00000000e+00) * x002, Mb[9], Mb[34]);
	Mb[34] = fmaf(T(4.00000000e+00) * x001, Mb[19], Mb[34]);
	Mb[33] = fmaf( x013, Mb[0], Mb[33]);
	Mb[33] = fmaf(T(3.00000000e+00) * x012, Mb[3], Mb[33]);
	Mb[33] = fmaf(T(3.00000000e+00) * x011, Mb[9], Mb[33]);
	Mb[33] = fmaf( x010, Mb[19], Mb[33]);
	Mb[33] = fmaf( x003, Mb[2], Mb[33]);
	Mb[33] = fmaf(T(3.00000000e+00) * x002, Mb[8], Mb[33]);
	Mb[33] = fmaf(T(3.00000000e+00) * x001, Mb[18], Mb[33]);
	Mb[32] = fmaf( x022, Mb[0], Mb[32]);
	Mb[32] = fmaf(T(2.00000000e+00) * x021, Mb[3], Mb[32]);
	Mb[32] = fmaf( x020, Mb[9], Mb[32]);
	Mb[32] = fmaf(T(2.00000000e+00) * x012, Mb[2], Mb[32]);
	Mb[32] = fmaf(T(4.00000000e+00) * x011, Mb[8], Mb[32]);
	Mb[32] = fmaf(T(2.00000000e+00) * x010, Mb[18], Mb[32]);
	Mb[32] = fmaf( x002, Mb[7], Mb[32]);
	Mb[32] = fmaf(T(2.00000000e+00) * x001, Mb[17], Mb[32]);
	Mb[31] = fmaf( x031, Mb[0], Mb[31]);
	Mb[31] = fmaf( x030, Mb[3], Mb[31]);
	Mb[31] = fmaf(T(3.00000000e+00) * x021, Mb[2], Mb[31]);
	Mb[31] = fmaf(T(3.00000000e+00) * x020, Mb[8], Mb[31]);
	Mb[31] = fmaf(T(3.00000000e+00) * x011, Mb[7], Mb[31]);
	Mb[31] = fmaf(T(3.00000000e+00) * x010, Mb[17], Mb[31]);
	Mb[31] = fmaf( x001, Mb[16], Mb[31]);
	Mb[30] = fmaf( x040, Mb[0], Mb[30]);
	Mb[30] = fmaf(T(4.00000000e+00) * x030, Mb[2], Mb[30]);
	Mb[30] = fmaf(T(6.00000000e+00) * x020, Mb[7], Mb[30]);
	Mb[30] = fmaf(T(4.00000000e+00) * x010, Mb[16], Mb[30]);
	Mb[29] = fmaf( x103, Mb[0], Mb[29]);
	Mb[29] = fmaf(T(3.00000000e+00) * x102, Mb[3], Mb[29]);
	Mb[29] = fmaf(T(3.00000000e+00) * x101, Mb[9], Mb[29]);
	Mb[29] = fmaf( x100, Mb[19], Mb[29]);
	Mb[29] = fmaf( x003, Mb[1], Mb[29]);
	Mb[29] = fmaf(T(3.00000000e+00) * x002, Mb[6], Mb[29]);
	Mb[29] = fmaf(T(3.00000000e+00) * x001, Mb[15], Mb[29]);
	Mb[28] = fmaf( x112, Mb[0], Mb[28]);
	Mb[28] = fmaf(T(2.00000000e+00) * x111, Mb[3], Mb[28]);
	Mb[28] = fmaf( x110, Mb[9], Mb[28]);
	Mb[28] = fmaf( x102, Mb[2], Mb[28]);
	Mb[28] = fmaf(T(2.00000000e+00) * x101, Mb[8], Mb[28]);
	Mb[28] = fmaf( x100, Mb[18], Mb[28]);
	Mb[28] = fmaf( x012, Mb[1], Mb[28]);
	Mb[28] = fmaf(T(2.00000000e+00) * x011, Mb[6], Mb[28]);
	Mb[28] = fmaf( x010, Mb[15], Mb[28]);
	Mb[28] = fmaf( x002, Mb[5], Mb[28]);
	Mb[28] = fmaf(T(2.00000000e+00) * x001, Mb[14], Mb[28]);
	Mb[27] = fmaf( x121, Mb[0], Mb[27]);
	Mb[27] = fmaf( x120, Mb[3], Mb[27]);
	Mb[27] = fmaf(T(2.00000000e+00) * x111, Mb[2], Mb[27]);
	Mb[27] = fmaf(T(2.00000000e+00) * x110, Mb[8], Mb[27]);
	Mb[27] = fmaf( x101, Mb[7], Mb[27]);
	Mb[27] = fmaf( x100, Mb[17], Mb[27]);
	Mb[27] = fmaf( x021, Mb[1], Mb[27]);
	Mb[27] = fmaf( x020, Mb[6], Mb[27]);
	Mb[27] = fmaf(T(2.00000000e+00) * x011, Mb[5], Mb[27]);
	Mb[27] = fmaf(T(2.00000000e+00) * x010, Mb[14], Mb[27]);
	Mb[27] = fmaf( x001, Mb[13], Mb[27]);
	Mb[26] = fmaf( x130, Mb[0], Mb[26]);
	Mb[26] = fmaf(T(3.00000000e+00) * x120, Mb[2], Mb[26]);
	Mb[26] = fmaf(T(3.00000000e+00) * x110, Mb[7], Mb[26]);
	Mb[26] = fmaf( x100, Mb[16], Mb[26]);
	Mb[26] = fmaf( x030, Mb[1], Mb[26]);
	Mb[26] = fmaf(T(3.00000000e+00) * x020, Mb[5], Mb[26]);
	Mb[26] = fmaf(T(3.00000000e+00) * x010, Mb[13], Mb[26]);
	Mb[25] = fmaf( x202, Mb[0], Mb[25]);
	Mb[25] = fmaf(T(2.00000000e+00) * x201, Mb[3], Mb[25]);
	Mb[25] = fmaf( x200, Mb[9], Mb[25]);
	Mb[25] = fmaf(T(2.00000000e+00) * x102, Mb[1], Mb[25]);
	Mb[25] = fmaf(T(4.00000000e+00) * x101, Mb[6], Mb[25]);
	Mb[25] = fmaf(T(2.00000000e+00) * x100, Mb[15], Mb[25]);
	Mb[25] = fmaf( x002, Mb[4], Mb[25]);
	Mb[25] = fmaf(T(2.00000000e+00) * x001, Mb[12], Mb[25]);
	Mb[24] = fmaf( x211, Mb[0], Mb[24]);
	Mb[24] = fmaf( x210, Mb[3], Mb[24]);
	Mb[24] = fmaf( x201, Mb[2], Mb[24]);
	Mb[24] = fmaf( x200, Mb[8], Mb[24]);
	Mb[24] = fmaf(T(2.00000000e+00) * x111, Mb[1], Mb[24]);
	Mb[24] = fmaf(T(2.00000000e+00) * x110, Mb[6], Mb[24]);
	Mb[24] = fmaf(T(2.00000000e+00) * x101, Mb[5], Mb[24]);
	Mb[24] = fmaf(T(2.00000000e+00) * x100, Mb[14], Mb[24]);
	Mb[24] = fmaf( x011, Mb[4], Mb[24]);
	Mb[24] = fmaf( x010, Mb[12], Mb[24]);
	Mb[24] = fmaf( x001, Mb[11], Mb[24]);
	Mb[23] = fmaf( x220, Mb[0], Mb[23]);
	Mb[23] = fmaf(T(2.00000000e+00) * x210, Mb[2], Mb[23]);
	Mb[23] = fmaf( x200, Mb[7], Mb[23]);
	Mb[23] = fmaf(T(2.00000000e+00) * x120, Mb[1], Mb[23]);
	Mb[23] = fmaf(T(4.00000000e+00) * x110, Mb[5], Mb[23]);
	Mb[23] = fmaf(T(2.00000000e+00) * x100, Mb[13], Mb[23]);
	Mb[23] = fmaf( x020, Mb[4], Mb[23]);
	Mb[23] = fmaf(T(2.00000000e+00) * x010, Mb[11], Mb[23]);
	Mb[22] = fmaf( x301, Mb[0], Mb[22]);
	Mb[22] = fmaf( x300, Mb[3], Mb[22]);
	Mb[22] = fmaf(T(3.00000000e+00) * x201, Mb[1], Mb[22]);
	Mb[22] = fmaf(T(3.00000000e+00) * x200, Mb[6], Mb[22]);
	Mb[22] = fmaf(T(3.00000000e+00) * x101, Mb[4], Mb[22]);
	Mb[22] = fmaf(T(3.00000000e+00) * x100, Mb[12], Mb[22]);
	Mb[22] = fmaf( x001, Mb[10], Mb[22]);
	Mb[21] = fmaf( x310, Mb[0], Mb[21]);
	Mb[21] = fmaf( x300, Mb[2], Mb[21]);
	Mb[21] = fmaf(T(3.00000000e+00) * x210, Mb[1], Mb[21]);
	Mb[21] = fmaf(T(3.00000000e+00) * x200, Mb[5], Mb[21]);
	Mb[21] = fmaf(T(3.00000000e+00) * x110, Mb[4], Mb[21]);
	Mb[21] = fmaf(T(3.00000000e+00) * x100, Mb[11], Mb[21]);
	Mb[21] = fmaf( x010, Mb[10], Mb[21]);
	Mb[20] = fmaf( x400, Mb[0], Mb[20]);
	Mb[20] = fmaf(T(4.00000000e+00) * x300, Mb[1], Mb[20]);
	Mb[20] = fmaf(T(6.00000000e+00) * x200, Mb[4], Mb[20]);
	Mb[20] = fmaf(T(4.00000000e+00) * x100, Mb[10], Mb[20]);
	Mb[19] = fmaf( x003, Mb[0], Mb[19]);
	Mb[19] = fmaf(T(3.00000000e+00) * x002, Mb[3], Mb[19]);
	Mb[19] = fmaf(T(3.00000000e+00) * x001, Mb[9], Mb[19]);
	Mb[18] = fmaf( x012, Mb[0], Mb[18]);
	Mb[18] = fmaf(T(2.00000000e+00) * x011, Mb[3], Mb[18]);
	Mb[18] = fmaf( x010, Mb[9], Mb[18]);
	Mb[18] = fmaf( x002, Mb[2], Mb[18]);
	Mb[18] = fmaf(T(2.00000000e+00) * x001, Mb[8], Mb[18]);
	Mb[17] = fmaf( x021, Mb[0], Mb[17]);
	Mb[17] = fmaf( x020, Mb[3], Mb[17]);
	Mb[17] = fmaf(T(2.00000000e+00) * x011, Mb[2], Mb[17]);
	Mb[17] = fmaf(T(2.00000000e+00) * x010, Mb[8], Mb[17]);
	Mb[17] = fmaf( x001, Mb[7], Mb[17]);
	Mb[16] = fmaf( x030, Mb[0], Mb[16]);
	Mb[16] = fmaf(T(3.00000000e+00) * x020, Mb[2], Mb[16]);
	Mb[16] = fmaf(T(3.00000000e+00) * x010, Mb[7], Mb[16]);
	Mb[15] = fmaf( x102, Mb[0], Mb[15]);
	Mb[15] = fmaf(T(2.00000000e+00) * x101, Mb[3], Mb[15]);
	Mb[15] = fmaf( x100, Mb[9], Mb[15]);
	Mb[15] = fmaf( x002, Mb[1], Mb[15]);
	Mb[15] = fmaf(T(2.00000000e+00) * x001, Mb[6], Mb[15]);
	Mb[14] = fmaf( x111, Mb[0], Mb[14]);
	Mb[14] = fmaf( x110, Mb[3], Mb[14]);
	Mb[14] = fmaf( x101, Mb[2], Mb[14]);
	Mb[14] = fmaf( x100, Mb[8], Mb[14]);
	Mb[14] = fmaf( x011, Mb[1], Mb[14]);
	Mb[14] = fmaf( x010, Mb[6], Mb[14]);
	Mb[14] = fmaf( x001, Mb[5], Mb[14]);
	Mb[13] = fmaf( x120, Mb[0], Mb[13]);
	Mb[13] = fmaf(T(2.00000000e+00) * x110, Mb[2], Mb[13]);
	Mb[13] = fmaf( x100, Mb[7], Mb[13]);
	Mb[13] = fmaf( x020, Mb[1], Mb[13]);
	Mb[13] = fmaf(T(2.00000000e+00) * x010, Mb[5], Mb[13]);
	Mb[12] = fmaf( x201, Mb[0], Mb[12]);
	Mb[12] = fmaf( x200, Mb[3], Mb[12]);
	Mb[12] = fmaf(T(2.00000000e+00) * x101, Mb[1], Mb[12]);
	Mb[12] = fmaf(T(2.00000000e+00) * x100, Mb[6], Mb[12]);
	Mb[12] = fmaf( x001, Mb[4], Mb[12]);
	Mb[11] = fmaf( x210, Mb[0], Mb[11]);
	Mb[11] = fmaf( x200, Mb[2], Mb[11]);
	Mb[11] = fmaf(T(2.00000000e+00) * x110, Mb[1], Mb[11]);
	Mb[11] = fmaf(T(2.00000000e+00) * x100, Mb[5], Mb[11]);
	Mb[11] = fmaf( x010, Mb[4], Mb[11]);
	Mb[10] = fmaf( x300, Mb[0], Mb[10]);
	Mb[10] = fmaf(T(3.00000000e+00) * x200, Mb[1], Mb[10]);
	Mb[10] = fmaf(T(3.00000000e+00) * x100, Mb[4], Mb[10]);
	Mb[9] = fmaf( x002, Mb[0], Mb[9]);
	Mb[9] = fmaf(T(2.00000000e+00) * x001, Mb[3], Mb[9]);
	Mb[8] = fmaf( x011, Mb[0], Mb[8]);
	Mb[8] = fmaf( x010, Mb[3], Mb[8]);
	Mb[8] = fmaf( x001, Mb[2], Mb[8]);
	Mb[7] = fmaf( x020, Mb[0], Mb[7]);
	Mb[7] = fmaf(T(2.00000000e+00) * x010, Mb[2], Mb[7]);
	Mb[6] = fmaf( x101, Mb[0], Mb[6]);
	Mb[6] = fmaf( x100, Mb[3], Mb[6]);
	Mb[6] = fmaf( x001, Mb[1], Mb[6]);
	Mb[5] = fmaf( x110, Mb[0], Mb[5]);
	Mb[5] = fmaf( x100, Mb[2], Mb[5]);
	Mb[5] = fmaf( x010, Mb[1], Mb[5]);
	Mb[4] = fmaf( x200, Mb[0], Mb[4]);
	Mb[4] = fmaf(T(2.00000000e+00) * x100, Mb[1], Mb[4]);
	Mb[3] = fmaf( x001, Mb[0], Mb[3]);
	Mb[2] = fmaf( x010, Mb[0], Mb[2]);
	Mb[1] = fmaf( x100, Mb[0], Mb[1]);
	Mc000 = Mb000;
	Mc001 = Mb001;
	Mc002 = Mb002;
	Mc010 = Mb010;
	Mc011 = Mb011;
	Mc020 = Mb020;
	Mc021 = T(-2.00000000e-01) * Mb003;
	Mc021 = fmaf(T(8.00000000e-01), Mb021, Mc021);
	Mc400 = T(2.28571429e-01) * Mb400;
	Mc021 = fmaf(T(-2.00000000e-01), Mb201, Mc021);
	Mc030 = T(-6.00000000e-01) * Mb012;
	Mc030 = fmaf(T(4.00000000e-01), Mb030, Mc030);
	Mc400 = fmaf(T(-6.85714286e-01), Mb220, Mc400);
	Mc030 = fmaf(T(-6.00000000e-01), Mb210, Mc030);
	Mc031 = T(-4.28571429e-01) * Mb013;
	Mc031 = fmaf(T(5.71428571e-01), Mb031, Mc031);
	Mc400 = fmaf(T(-6.85714286e-01), Mb202, Mc400);
	Mc031 = fmaf(T(-4.28571429e-01), Mb211, Mc031);
	Mc040 = T(8.57142857e-02) * Mb004;
	Mc040 = fmaf(T(-6.85714286e-01), Mb022, Mc040);
	Mc400 = fmaf(T(8.57142857e-02), Mb040, Mc400);
	Mc040 = fmaf(T(2.28571429e-01), Mb040, Mc040);
	Mc400 = fmaf(T(1.71428571e-01), Mb022, Mc400);
	Mc400 = fmaf(T(8.57142857e-02), Mb004, Mc400);
	Mc040 = fmaf(T(1.71428571e-01), Mb202, Mc040);
	Mc040 = fmaf(T(-6.85714286e-01), Mb220, Mc040);
	Mc310 = T(5.71428571e-01) * Mb310;
	Mc040 = fmaf(T(8.57142857e-02), Mb400, Mc040);
	Mc100 = Mb100;
	Mc101 = Mb101;
	Mc110 = Mb110;
	Mc111 = Mb111;
	Mc120 = T(-2.00000000e-01) * Mb102;
	Mc120 = fmaf(T(8.00000000e-01), Mb120, Mc120);
	Mc310 = fmaf(T(-4.28571429e-01), Mb130, Mc310);
	Mc120 = fmaf(T(-2.00000000e-01), Mb300, Mc120);
	Mc121 = T(-1.42857143e-01) * Mb103;
	Mc121 = fmaf(T(8.57142857e-01), Mb121, Mc121);
	Mc310 = fmaf(T(-4.28571429e-01), Mb112, Mc310);
	Mc121 = fmaf(T(-1.42857143e-01), Mb301, Mc121);
	Mc130 = T(-4.28571429e-01) * Mb112;
	Mc130 = fmaf(T(5.71428571e-01), Mb130, Mc130);
	Mc301 = T(5.71428571e-01) * Mb301;
	Mc130 = fmaf(T(-4.28571429e-01), Mb310, Mc130);
	Mc200 = Mb200;
	Mc201 = T(-2.00000000e-01) * Mb003;
	Mc201 = fmaf(T(-2.00000000e-01), Mb021, Mc201);
	Mc201 = fmaf(T(8.00000000e-01), Mb201, Mc201);
	Mc301 = fmaf(T(-4.28571429e-01), Mb121, Mc301);
	Mc210 = T(-2.00000000e-01) * Mb012;
	Mc210 = fmaf(T(-2.00000000e-01), Mb030, Mc210);
	Mc210 = fmaf(T(8.00000000e-01), Mb210, Mc210);
	Mc301 = fmaf(T(-4.28571429e-01), Mb103, Mc301);
	Mc211 = T(-1.42857143e-01) * Mb013;
	Mc211 = fmaf(T(-1.42857143e-01), Mb031, Mc211);
	Mc211 = fmaf(T(8.57142857e-01), Mb211, Mc211);
	Mc300 = T(4.00000000e-01) * Mb300;
	Mc220 = T(2.85714286e-02) * Mb004;
	Mc220 = fmaf(T(-8.57142857e-02), Mb022, Mc220);
	Mc300 = fmaf(T(-6.00000000e-01), Mb120, Mc300);
	Mc220 = fmaf(T(-1.14285714e-01), Mb040, Mc220);
	Mc300 = fmaf(T(-6.00000000e-01), Mb102, Mc300);
	Mc220 = fmaf(T(-8.57142857e-02), Mb202, Mc220);
	Mc220 = fmaf(T(-1.14285714e-01), Mb400, Mc220);
	Mc220 = fmaf(T(7.71428571e-01), Mb220, Mc220);
	return Mc;
/* FLOPS = 574*/
}
template<class T>
CUDA_EXPORT
tensor_trless_sym<T, 6> expansion_translate(const tensor_trless_sym<T, 6>& La, const array<T, NDIM>& X, bool do_phi) {
	tensor_trless_sym<T, 6> Lb;
	const T x000 = T(1);
	const T& x100 = X[0];
	const T& x010 = X[1];
	const T& x001 = X[2];
	const T x002 = x001 * x001;
	const T x011 = x010 * x001;
	const T x020 = x010 * x010;
	const T x101 = x100 * x001;
	const T x110 = x100 * x010;
	const T x200 = x100 * x100;
	const T x003 = x002 * x001;
	const T x012 = x011 * x001;
	const T x021 = x011 * x010;
	const T x030 = x020 * x010;
	const T x102 = x101 * x001;
	const T x111 = x110 * x001;
	const T x120 = x110 * x010;
	const T x201 = x101 * x100;
	const T x210 = x110 * x100;
	const T x300 = x200 * x100;
	const T x004 = x002 * x002;
	const T x013 = x011 * x002;
	const T x022 = x011 * x011;
	const T x031 = x011 * x020;
	const T x040 = x020 * x020;
	const T x103 = x101 * x002;
	const T x112 = x110 * x002;
	const T x121 = x110 * x011;
	const T x130 = x110 * x020;
	const T x202 = x101 * x101;
	const T x211 = x110 * x101;
	const T x220 = x110 * x110;
	const T x301 = x101 * x200;
	const T x310 = x110 * x200;
	const T x400 = x200 * x200;
	const T x005 = x003 * x002;
	const T x014 = x012 * x002;
	const T x023 = x021 * x002;
	const T x032 = x021 * x011;
	const T x041 = x021 * x020;
	const T x050 = x030 * x020;
	const T x104 = x102 * x002;
	const T x113 = x111 * x002;
	const T x122 = x111 * x011;
	const T x131 = x111 * x020;
	const T x140 = x120 * x020;
	const T x203 = x201 * x002;
	const T x212 = x111 * x101;
	const T x221 = x111 * x110;
	const T x230 = x210 * x020;
	const T x302 = x201 * x101;
	const T x311 = x111 * x200;
	const T x320 = x210 * x110;
	const T x401 = x201 * x200;
	const T x410 = x210 * x200;
	const T x500 = x300 * x200;
	const T& La000 =  (La[0]);
	const T& La001 =  (La[21]);
	const T& La002 =  (La[36]);
	const T La003 = -(La[24]+(La[26]));
	const T La004 =  (La[10]+fmaf(T(2),La[12],(La[14])));
	const T La005 =  (La[31]+fmaf(T(2),La[33],(La[35])));
	const T& La010 =  (La[2]);
	const T& La011 =  (La[23]);
	const T La012 = -(La[7]+(La[9]));
	const T La013 = -(La[28]+(La[30]));
	const T La014 =  (La[16]+fmaf(T(2),La[18],(La[20])));
	const T& La020 =  (La[5]);
	const T& La021 =  (La[26]);
	const T La022 = -(La[12]+(La[14]));
	const T La023 = -(La[33]+(La[35]));
	const T& La030 =  (La[9]);
	const T& La031 =  (La[30]);
	const T La032 = -(La[18]+(La[20]));
	const T& La040 =  (La[14]);
	const T& La041 =  (La[35]);
	const T& La050 =  (La[20]);
	const T& La100 =  (La[1]);
	const T& La101 =  (La[22]);
	const T La102 = -(La[6]+(La[8]));
	const T La103 = -(La[27]+(La[29]));
	const T La104 =  (La[15]+fmaf(T(2),La[17],(La[19])));
	const T& La110 =  (La[4]);
	const T& La111 =  (La[25]);
	const T La112 = -(La[11]+(La[13]));
	const T La113 = -(La[32]+(La[34]));
	const T& La120 =  (La[8]);
	const T& La121 =  (La[29]);
	const T La122 = -(La[17]+(La[19]));
	const T& La130 =  (La[13]);
	const T& La131 =  (La[34]);
	const T& La140 =  (La[19]);
	const T& La200 =  (La[3]);
	const T& La201 =  (La[24]);
	const T La202 = -(La[10]+(La[12]));
	const T La203 = -(La[31]+(La[33]));
	const T& La210 =  (La[7]);
	const T& La211 =  (La[28]);
	const T La212 = -(La[16]+(La[18]));
	const T& La220 =  (La[12]);
	const T& La221 =  (La[33]);
	const T& La230 =  (La[18]);
	const T& La300 =  (La[6]);
	const T& La301 =  (La[27]);
	const T La302 = -(La[15]+(La[17]));
	const T& La310 =  (La[11]);
	const T& La311 =  (La[32]);
	const T& La320 =  (La[17]);
	const T& La400 =  (La[10]);
	const T& La401 =  (La[31]);
	const T& La410 =  (La[16]);
	const T& La500 =  (La[15]);
	Lb = La;
	if( do_phi ) {
		Lb[0] = fmaf( x001, La001, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x002, La002, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x003, La003, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x004, La004, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-03) * x005, La005, Lb[0]);
		Lb[0] = fmaf( x010, La010, Lb[0]);
		Lb[0] = fmaf( x011, La011, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x012, La012, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x013, La013, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x014, La014, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x020, La020, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x021, La021, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x022, La022, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x023, La023, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x030, La030, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x031, La031, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x032, La032, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x040, La040, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x041, La041, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-03) * x050, La050, Lb[0]);
		Lb[0] = fmaf( x100, La100, Lb[0]);
		Lb[0] = fmaf( x101, La101, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x102, La102, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x103, La103, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x104, La104, Lb[0]);
		Lb[0] = fmaf( x110, La110, Lb[0]);
		Lb[0] = fmaf( x111, La111, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x112, La112, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x113, La113, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x120, La120, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x121, La121, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x122, La122, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x130, La130, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x131, La131, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x140, La140, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x200, La200, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x201, La201, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x202, La202, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x203, La203, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x210, La210, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x211, La211, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x212, La212, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x220, La220, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x221, La221, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x230, La230, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x300, La300, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x301, La301, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x302, La302, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x310, La310, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x311, La311, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x320, La320, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x400, La400, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x401, La401, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x410, La410, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-03) * x500, La500, Lb[0]);
	}
	Lb[21] = fmaf( x001, La002, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x002, La003, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x003, La004, Lb[21]);
	Lb[21] = fmaf(T(4.16666667e-02) * x004, La005, Lb[21]);
	Lb[21] = fmaf( x010, La011, Lb[21]);
	Lb[21] = fmaf( x011, La012, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x012, La013, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x013, La014, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x020, La021, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x021, La022, Lb[21]);
	Lb[21] = fmaf(T(2.50000000e-01) * x022, La023, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x030, La031, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x031, La032, Lb[21]);
	Lb[21] = fmaf(T(4.16666667e-02) * x040, La041, Lb[21]);
	Lb[21] = fmaf( x100, La101, Lb[21]);
	Lb[21] = fmaf( x101, La102, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x102, La103, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x103, La104, Lb[21]);
	Lb[21] = fmaf( x110, La111, Lb[21]);
	Lb[21] = fmaf( x111, La112, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x112, La113, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x120, La121, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x121, La122, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x130, La131, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x200, La201, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x201, La202, Lb[21]);
	Lb[21] = fmaf(T(2.50000000e-01) * x202, La203, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x210, La211, Lb[21]);
	Lb[21] = fmaf(T(5.00000000e-01) * x211, La212, Lb[21]);
	Lb[21] = fmaf(T(2.50000000e-01) * x220, La221, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x300, La301, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x301, La302, Lb[21]);
	Lb[21] = fmaf(T(1.66666667e-01) * x310, La311, Lb[21]);
	Lb[21] = fmaf(T(4.16666667e-02) * x400, La401, Lb[21]);
	Lb[2] = fmaf( x001, La011, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x002, La012, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x003, La013, Lb[2]);
	Lb[2] = fmaf(T(4.16666667e-02) * x004, La014, Lb[2]);
	Lb[2] = fmaf( x010, La020, Lb[2]);
	Lb[2] = fmaf( x011, La021, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x012, La022, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x013, La023, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x020, La030, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x021, La031, Lb[2]);
	Lb[2] = fmaf(T(2.50000000e-01) * x022, La032, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x030, La040, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x031, La041, Lb[2]);
	Lb[2] = fmaf(T(4.16666667e-02) * x040, La050, Lb[2]);
	Lb[2] = fmaf( x100, La110, Lb[2]);
	Lb[2] = fmaf( x101, La111, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x102, La112, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x103, La113, Lb[2]);
	Lb[2] = fmaf( x110, La120, Lb[2]);
	Lb[2] = fmaf( x111, La121, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x112, La122, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x120, La130, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x121, La131, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x130, La140, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x200, La210, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x201, La211, Lb[2]);
	Lb[2] = fmaf(T(2.50000000e-01) * x202, La212, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x210, La220, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x211, La221, Lb[2]);
	Lb[2] = fmaf(T(2.50000000e-01) * x220, La230, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x300, La310, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x301, La311, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x310, La320, Lb[2]);
	Lb[2] = fmaf(T(4.16666667e-02) * x400, La410, Lb[2]);
	Lb[1] = fmaf( x001, La101, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x002, La102, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x003, La103, Lb[1]);
	Lb[1] = fmaf(T(4.16666667e-02) * x004, La104, Lb[1]);
	Lb[1] = fmaf( x010, La110, Lb[1]);
	Lb[1] = fmaf( x011, La111, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x012, La112, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x013, La113, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x020, La120, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x021, La121, Lb[1]);
	Lb[1] = fmaf(T(2.50000000e-01) * x022, La122, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x030, La130, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x031, La131, Lb[1]);
	Lb[1] = fmaf(T(4.16666667e-02) * x040, La140, Lb[1]);
	Lb[1] = fmaf( x100, La200, Lb[1]);
	Lb[1] = fmaf( x101, La201, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x102, La202, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x103, La203, Lb[1]);
	Lb[1] = fmaf( x110, La210, Lb[1]);
	Lb[1] = fmaf( x111, La211, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x112, La212, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x120, La220, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x121, La221, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x130, La230, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x200, La300, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x201, La301, Lb[1]);
	Lb[1] = fmaf(T(2.50000000e-01) * x202, La302, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x210, La310, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x211, La311, Lb[1]);
	Lb[1] = fmaf(T(2.50000000e-01) * x220, La320, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x300, La400, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x301, La401, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x310, La410, Lb[1]);
	Lb[1] = fmaf(T(4.16666667e-02) * x400, La500, Lb[1]);
	Lb[36] = fmaf( x001, La003, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x002, La004, Lb[36]);
	Lb[36] = fmaf(T(1.66666667e-01) * x003, La005, Lb[36]);
	Lb[36] = fmaf( x010, La012, Lb[36]);
	Lb[36] = fmaf( x011, La013, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x012, La014, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x020, La022, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x021, La023, Lb[36]);
	Lb[36] = fmaf(T(1.66666667e-01) * x030, La032, Lb[36]);
	Lb[36] = fmaf( x100, La102, Lb[36]);
	Lb[36] = fmaf( x101, La103, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x102, La104, Lb[36]);
	Lb[36] = fmaf( x110, La112, Lb[36]);
	Lb[36] = fmaf( x111, La113, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x120, La122, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x200, La202, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x201, La203, Lb[36]);
	Lb[36] = fmaf(T(5.00000000e-01) * x210, La212, Lb[36]);
	Lb[36] = fmaf(T(1.66666667e-01) * x300, La302, Lb[36]);
	Lb[23] = fmaf( x001, La012, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x002, La013, Lb[23]);
	Lb[23] = fmaf(T(1.66666667e-01) * x003, La014, Lb[23]);
	Lb[23] = fmaf( x010, La021, Lb[23]);
	Lb[23] = fmaf( x011, La022, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x012, La023, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x020, La031, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x021, La032, Lb[23]);
	Lb[23] = fmaf(T(1.66666667e-01) * x030, La041, Lb[23]);
	Lb[23] = fmaf( x100, La111, Lb[23]);
	Lb[23] = fmaf( x101, La112, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x102, La113, Lb[23]);
	Lb[23] = fmaf( x110, La121, Lb[23]);
	Lb[23] = fmaf( x111, La122, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x120, La131, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x200, La211, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x201, La212, Lb[23]);
	Lb[23] = fmaf(T(5.00000000e-01) * x210, La221, Lb[23]);
	Lb[23] = fmaf(T(1.66666667e-01) * x300, La311, Lb[23]);
	Lb[5] = fmaf( x001, La021, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x002, La022, Lb[5]);
	Lb[5] = fmaf(T(1.66666667e-01) * x003, La023, Lb[5]);
	Lb[5] = fmaf( x010, La030, Lb[5]);
	Lb[5] = fmaf( x011, La031, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x012, La032, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x020, La040, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x021, La041, Lb[5]);
	Lb[5] = fmaf(T(1.66666667e-01) * x030, La050, Lb[5]);
	Lb[5] = fmaf( x100, La120, Lb[5]);
	Lb[5] = fmaf( x101, La121, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x102, La122, Lb[5]);
	Lb[5] = fmaf( x110, La130, Lb[5]);
	Lb[5] = fmaf( x111, La131, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x120, La140, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x200, La220, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x201, La221, Lb[5]);
	Lb[5] = fmaf(T(5.00000000e-01) * x210, La230, Lb[5]);
	Lb[5] = fmaf(T(1.66666667e-01) * x300, La320, Lb[5]);
	Lb[22] = fmaf( x001, La102, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x002, La103, Lb[22]);
	Lb[22] = fmaf(T(1.66666667e-01) * x003, La104, Lb[22]);
	Lb[22] = fmaf( x010, La111, Lb[22]);
	Lb[22] = fmaf( x011, La112, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x012, La113, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x020, La121, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x021, La122, Lb[22]);
	Lb[22] = fmaf(T(1.66666667e-01) * x030, La131, Lb[22]);
	Lb[22] = fmaf( x100, La201, Lb[22]);
	Lb[22] = fmaf( x101, La202, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x102, La203, Lb[22]);
	Lb[22] = fmaf( x110, La211, Lb[22]);
	Lb[22] = fmaf( x111, La212, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x120, La221, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x200, La301, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x201, La302, Lb[22]);
	Lb[22] = fmaf(T(5.00000000e-01) * x210, La311, Lb[22]);
	Lb[22] = fmaf(T(1.66666667e-01) * x300, La401, Lb[22]);
	Lb[4] = fmaf( x001, La111, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x002, La112, Lb[4]);
	Lb[4] = fmaf(T(1.66666667e-01) * x003, La113, Lb[4]);
	Lb[4] = fmaf( x010, La120, Lb[4]);
	Lb[4] = fmaf( x011, La121, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x012, La122, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x020, La130, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x021, La131, Lb[4]);
	Lb[4] = fmaf(T(1.66666667e-01) * x030, La140, Lb[4]);
	Lb[4] = fmaf( x100, La210, Lb[4]);
	Lb[4] = fmaf( x101, La211, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x102, La212, Lb[4]);
	Lb[4] = fmaf( x110, La220, Lb[4]);
	Lb[4] = fmaf( x111, La221, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x120, La230, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x200, La310, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x201, La311, Lb[4]);
	Lb[4] = fmaf(T(5.00000000e-01) * x210, La320, Lb[4]);
	Lb[4] = fmaf(T(1.66666667e-01) * x300, La410, Lb[4]);
	Lb[3] = fmaf( x001, La201, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x002, La202, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x003, La203, Lb[3]);
	Lb[3] = fmaf( x010, La210, Lb[3]);
	Lb[3] = fmaf( x011, La211, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x012, La212, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x020, La220, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x021, La221, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x030, La230, Lb[3]);
	Lb[3] = fmaf( x100, La300, Lb[3]);
	Lb[3] = fmaf( x101, La301, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x102, La302, Lb[3]);
	Lb[3] = fmaf( x110, La310, Lb[3]);
	Lb[3] = fmaf( x111, La311, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x120, La320, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x200, La400, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x201, La401, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x210, La410, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x300, La500, Lb[3]);
	Lb[26] = fmaf( x001, La022, Lb[26]);
	Lb[26] = fmaf(T(5.00000000e-01) * x002, La023, Lb[26]);
	Lb[26] = fmaf( x010, La031, Lb[26]);
	Lb[26] = fmaf( x011, La032, Lb[26]);
	Lb[26] = fmaf(T(5.00000000e-01) * x020, La041, Lb[26]);
	Lb[26] = fmaf( x100, La121, Lb[26]);
	Lb[26] = fmaf( x101, La122, Lb[26]);
	Lb[26] = fmaf( x110, La131, Lb[26]);
	Lb[26] = fmaf(T(5.00000000e-01) * x200, La221, Lb[26]);
	Lb[9] = fmaf( x001, La031, Lb[9]);
	Lb[9] = fmaf(T(5.00000000e-01) * x002, La032, Lb[9]);
	Lb[9] = fmaf( x010, La040, Lb[9]);
	Lb[9] = fmaf( x011, La041, Lb[9]);
	Lb[9] = fmaf(T(5.00000000e-01) * x020, La050, Lb[9]);
	Lb[9] = fmaf( x100, La130, Lb[9]);
	Lb[9] = fmaf( x101, La131, Lb[9]);
	Lb[9] = fmaf( x110, La140, Lb[9]);
	Lb[9] = fmaf(T(5.00000000e-01) * x200, La230, Lb[9]);
	Lb[25] = fmaf( x001, La112, Lb[25]);
	Lb[25] = fmaf(T(5.00000000e-01) * x002, La113, Lb[25]);
	Lb[25] = fmaf( x010, La121, Lb[25]);
	Lb[25] = fmaf( x011, La122, Lb[25]);
	Lb[25] = fmaf(T(5.00000000e-01) * x020, La131, Lb[25]);
	Lb[25] = fmaf( x100, La211, Lb[25]);
	Lb[25] = fmaf( x101, La212, Lb[25]);
	Lb[25] = fmaf( x110, La221, Lb[25]);
	Lb[25] = fmaf(T(5.00000000e-01) * x200, La311, Lb[25]);
	Lb[8] = fmaf( x001, La121, Lb[8]);
	Lb[8] = fmaf(T(5.00000000e-01) * x002, La122, Lb[8]);
	Lb[8] = fmaf( x010, La130, Lb[8]);
	Lb[8] = fmaf( x011, La131, Lb[8]);
	Lb[8] = fmaf(T(5.00000000e-01) * x020, La140, Lb[8]);
	Lb[8] = fmaf( x100, La220, Lb[8]);
	Lb[8] = fmaf( x101, La221, Lb[8]);
	Lb[8] = fmaf( x110, La230, Lb[8]);
	Lb[8] = fmaf(T(5.00000000e-01) * x200, La320, Lb[8]);
	Lb[24] = fmaf( x001, La202, Lb[24]);
	Lb[24] = fmaf(T(5.00000000e-01) * x002, La203, Lb[24]);
	Lb[24] = fmaf( x010, La211, Lb[24]);
	Lb[24] = fmaf( x011, La212, Lb[24]);
	Lb[24] = fmaf(T(5.00000000e-01) * x020, La221, Lb[24]);
	Lb[24] = fmaf( x100, La301, Lb[24]);
	Lb[24] = fmaf( x101, La302, Lb[24]);
	Lb[24] = fmaf( x110, La311, Lb[24]);
	Lb[24] = fmaf(T(5.00000000e-01) * x200, La401, Lb[24]);
	Lb[7] = fmaf( x001, La211, Lb[7]);
	Lb[7] = fmaf(T(5.00000000e-01) * x002, La212, Lb[7]);
	Lb[7] = fmaf( x010, La220, Lb[7]);
	Lb[7] = fmaf( x011, La221, Lb[7]);
	Lb[7] = fmaf(T(5.00000000e-01) * x020, La230, Lb[7]);
	Lb[7] = fmaf( x100, La310, Lb[7]);
	Lb[7] = fmaf( x101, La311, Lb[7]);
	Lb[7] = fmaf( x110, La320, Lb[7]);
	Lb[7] = fmaf(T(5.00000000e-01) * x200, La410, Lb[7]);
	Lb[6] = fmaf( x001, La301, Lb[6]);
	Lb[6] = fmaf(T(5.00000000e-01) * x002, La302, Lb[6]);
	Lb[6] = fmaf( x010, La310, Lb[6]);
	Lb[6] = fmaf( x011, La311, Lb[6]);
	Lb[6] = fmaf(T(5.00000000e-01) * x020, La320, Lb[6]);
	Lb[6] = fmaf( x100, La400, Lb[6]);
	Lb[6] = fmaf( x101, La401, Lb[6]);
	Lb[6] = fmaf( x110, La410, Lb[6]);
	Lb[6] = fmaf(T(5.00000000e-01) * x200, La500, Lb[6]);
	Lb[30] = fmaf( x001, La032, Lb[30]);
	Lb[30] = fmaf( x010, La041, Lb[30]);
	Lb[30] = fmaf( x100, La131, Lb[30]);
	Lb[14] = fmaf( x001, La041, Lb[14]);
	Lb[14] = fmaf( x010, La050, Lb[14]);
	Lb[14] = fmaf( x100, La140, Lb[14]);
	Lb[29] = fmaf( x001, La122, Lb[29]);
	Lb[29] = fmaf( x010, La131, Lb[29]);
	Lb[29] = fmaf( x100, La221, Lb[29]);
	Lb[13] = fmaf( x001, La131, Lb[13]);
	Lb[13] = fmaf( x010, La140, Lb[13]);
	Lb[13] = fmaf( x100, La230, Lb[13]);
	Lb[28] = fmaf( x001, La212, Lb[28]);
	Lb[28] = fmaf( x010, La221, Lb[28]);
	Lb[28] = fmaf( x100, La311, Lb[28]);
	Lb[12] = fmaf( x001, La221, Lb[12]);
	Lb[12] = fmaf( x010, La230, Lb[12]);
	Lb[12] = fmaf( x100, La320, Lb[12]);
	Lb[27] = fmaf( x001, La302, Lb[27]);
	Lb[27] = fmaf( x010, La311, Lb[27]);
	Lb[27] = fmaf( x100, La401, Lb[27]);
	Lb[11] = fmaf( x001, La311, Lb[11]);
	Lb[11] = fmaf( x010, La320, Lb[11]);
	Lb[11] = fmaf( x100, La410, Lb[11]);
	Lb[10] = fmaf( x001, La401, Lb[10]);
	Lb[10] = fmaf( x010, La410, Lb[10]);
	Lb[10] = fmaf( x100, La500, Lb[10]);
	return Lb;
/* FLOPS = 1038*/
}
template<class T>
CUDA_EXPORT
tensor_trless_sym<T, 2> expansion_translate2(const tensor_trless_sym<T, 6>& La, const array<T, NDIM>& X, bool do_phi) {
	tensor_trless_sym<T, 2> Lb;
	const T x000 = T(1);
	const T& x100 = X[0];
	const T& x010 = X[1];
	const T& x001 = X[2];
	const T x002 = x001 * x001;
	const T x011 = x010 * x001;
	const T x020 = x010 * x010;
	const T x101 = x100 * x001;
	const T x110 = x100 * x010;
	const T x200 = x100 * x100;
	const T x003 = x002 * x001;
	const T x012 = x011 * x001;
	const T x021 = x011 * x010;
	const T x030 = x020 * x010;
	const T x102 = x101 * x001;
	const T x111 = x110 * x001;
	const T x120 = x110 * x010;
	const T x201 = x101 * x100;
	const T x210 = x110 * x100;
	const T x300 = x200 * x100;
	const T x004 = x002 * x002;
	const T x013 = x011 * x002;
	const T x022 = x011 * x011;
	const T x031 = x011 * x020;
	const T x040 = x020 * x020;
	const T x103 = x101 * x002;
	const T x112 = x110 * x002;
	const T x121 = x110 * x011;
	const T x130 = x110 * x020;
	const T x202 = x101 * x101;
	const T x211 = x110 * x101;
	const T x220 = x110 * x110;
	const T x301 = x101 * x200;
	const T x310 = x110 * x200;
	const T x400 = x200 * x200;
	const T x005 = x003 * x002;
	const T x014 = x012 * x002;
	const T x023 = x021 * x002;
	const T x032 = x021 * x011;
	const T x041 = x021 * x020;
	const T x050 = x030 * x020;
	const T x104 = x102 * x002;
	const T x113 = x111 * x002;
	const T x122 = x111 * x011;
	const T x131 = x111 * x020;
	const T x140 = x120 * x020;
	const T x203 = x201 * x002;
	const T x212 = x111 * x101;
	const T x221 = x111 * x110;
	const T x230 = x210 * x020;
	const T x302 = x201 * x101;
	const T x311 = x111 * x200;
	const T x320 = x210 * x110;
	const T x401 = x201 * x200;
	const T x410 = x210 * x200;
	const T x500 = x300 * x200;
	const T& La000 =  (La[0]);
	const T& La001 =  (La[21]);
	const T& La002 =  (La[36]);
	const T La003 = -(La[24]+(La[26]));
	const T La004 =  (La[10]+fmaf(T(2),La[12],(La[14])));
	const T La005 =  (La[31]+fmaf(T(2),La[33],(La[35])));
	const T& La010 =  (La[2]);
	const T& La011 =  (La[23]);
	const T La012 = -(La[7]+(La[9]));
	const T La013 = -(La[28]+(La[30]));
	const T La014 =  (La[16]+fmaf(T(2),La[18],(La[20])));
	const T& La020 =  (La[5]);
	const T& La021 =  (La[26]);
	const T La022 = -(La[12]+(La[14]));
	const T La023 = -(La[33]+(La[35]));
	const T& La030 =  (La[9]);
	const T& La031 =  (La[30]);
	const T La032 = -(La[18]+(La[20]));
	const T& La040 =  (La[14]);
	const T& La041 =  (La[35]);
	const T& La050 =  (La[20]);
	const T& La100 =  (La[1]);
	const T& La101 =  (La[22]);
	const T La102 = -(La[6]+(La[8]));
	const T La103 = -(La[27]+(La[29]));
	const T La104 =  (La[15]+fmaf(T(2),La[17],(La[19])));
	const T& La110 =  (La[4]);
	const T& La111 =  (La[25]);
	const T La112 = -(La[11]+(La[13]));
	const T La113 = -(La[32]+(La[34]));
	const T& La120 =  (La[8]);
	const T& La121 =  (La[29]);
	const T La122 = -(La[17]+(La[19]));
	const T& La130 =  (La[13]);
	const T& La131 =  (La[34]);
	const T& La140 =  (La[19]);
	const T& La200 =  (La[3]);
	const T& La201 =  (La[24]);
	const T La202 = -(La[10]+(La[12]));
	const T La203 = -(La[31]+(La[33]));
	const T& La210 =  (La[7]);
	const T& La211 =  (La[28]);
	const T La212 = -(La[16]+(La[18]));
	const T& La220 =  (La[12]);
	const T& La221 =  (La[33]);
	const T& La230 =  (La[18]);
	const T& La300 =  (La[6]);
	const T& La301 =  (La[27]);
	const T La302 = -(La[15]+(La[17]));
	const T& La310 =  (La[11]);
	const T& La311 =  (La[32]);
	const T& La320 =  (La[17]);
	const T& La400 =  (La[10]);
	const T& La401 =  (La[31]);
	const T& La410 =  (La[16]);
	const T& La500 =  (La[15]);
	Lb = La;
	if( do_phi ) {
		Lb[0] = fmaf( x001, La001, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x002, La002, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x003, La003, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x004, La004, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-03) * x005, La005, Lb[0]);
		Lb[0] = fmaf( x010, La010, Lb[0]);
		Lb[0] = fmaf( x011, La011, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x012, La012, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x013, La013, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x014, La014, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x020, La020, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x021, La021, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x022, La022, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x023, La023, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x030, La030, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x031, La031, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x032, La032, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x040, La040, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x041, La041, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-03) * x050, La050, Lb[0]);
		Lb[0] = fmaf( x100, La100, Lb[0]);
		Lb[0] = fmaf( x101, La101, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x102, La102, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x103, La103, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x104, La104, Lb[0]);
		Lb[0] = fmaf( x110, La110, Lb[0]);
		Lb[0] = fmaf( x111, La111, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x112, La112, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x113, La113, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x120, La120, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x121, La121, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x122, La122, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x130, La130, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x131, La131, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x140, La140, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x200, La200, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x201, La201, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x202, La202, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x203, La203, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x210, La210, Lb[0]);
		Lb[0] = fmaf(T(5.00000000e-01) * x211, La211, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x212, La212, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x220, La220, Lb[0]);
		Lb[0] = fmaf(T(2.50000000e-01) * x221, La221, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x230, La230, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x300, La300, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x301, La301, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x302, La302, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x310, La310, Lb[0]);
		Lb[0] = fmaf(T(1.66666667e-01) * x311, La311, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-02) * x320, La320, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x400, La400, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x401, La401, Lb[0]);
		Lb[0] = fmaf(T(4.16666667e-02) * x410, La410, Lb[0]);
		Lb[0] = fmaf(T(8.33333333e-03) * x500, La500, Lb[0]);
	}
	Lb[3] = fmaf( x001, La002, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x002, La003, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x003, La004, Lb[3]);
	Lb[3] = fmaf(T(4.16666667e-02) * x004, La005, Lb[3]);
	Lb[3] = fmaf( x010, La011, Lb[3]);
	Lb[3] = fmaf( x011, La012, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x012, La013, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x013, La014, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x020, La021, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x021, La022, Lb[3]);
	Lb[3] = fmaf(T(2.50000000e-01) * x022, La023, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x030, La031, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x031, La032, Lb[3]);
	Lb[3] = fmaf(T(4.16666667e-02) * x040, La041, Lb[3]);
	Lb[3] = fmaf( x100, La101, Lb[3]);
	Lb[3] = fmaf( x101, La102, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x102, La103, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x103, La104, Lb[3]);
	Lb[3] = fmaf( x110, La111, Lb[3]);
	Lb[3] = fmaf( x111, La112, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x112, La113, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x120, La121, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x121, La122, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x130, La131, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x200, La201, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x201, La202, Lb[3]);
	Lb[3] = fmaf(T(2.50000000e-01) * x202, La203, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x210, La211, Lb[3]);
	Lb[3] = fmaf(T(5.00000000e-01) * x211, La212, Lb[3]);
	Lb[3] = fmaf(T(2.50000000e-01) * x220, La221, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x300, La301, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x301, La302, Lb[3]);
	Lb[3] = fmaf(T(1.66666667e-01) * x310, La311, Lb[3]);
	Lb[3] = fmaf(T(4.16666667e-02) * x400, La401, Lb[3]);
	Lb[2] = fmaf( x001, La011, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x002, La012, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x003, La013, Lb[2]);
	Lb[2] = fmaf(T(4.16666667e-02) * x004, La014, Lb[2]);
	Lb[2] = fmaf( x010, La020, Lb[2]);
	Lb[2] = fmaf( x011, La021, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x012, La022, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x013, La023, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x020, La030, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x021, La031, Lb[2]);
	Lb[2] = fmaf(T(2.50000000e-01) * x022, La032, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x030, La040, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x031, La041, Lb[2]);
	Lb[2] = fmaf(T(4.16666667e-02) * x040, La050, Lb[2]);
	Lb[2] = fmaf( x100, La110, Lb[2]);
	Lb[2] = fmaf( x101, La111, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x102, La112, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x103, La113, Lb[2]);
	Lb[2] = fmaf( x110, La120, Lb[2]);
	Lb[2] = fmaf( x111, La121, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x112, La122, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x120, La130, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x121, La131, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x130, La140, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x200, La210, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x201, La211, Lb[2]);
	Lb[2] = fmaf(T(2.50000000e-01) * x202, La212, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x210, La220, Lb[2]);
	Lb[2] = fmaf(T(5.00000000e-01) * x211, La221, Lb[2]);
	Lb[2] = fmaf(T(2.50000000e-01) * x220, La230, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x300, La310, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x301, La311, Lb[2]);
	Lb[2] = fmaf(T(1.66666667e-01) * x310, La320, Lb[2]);
	Lb[2] = fmaf(T(4.16666667e-02) * x400, La410, Lb[2]);
	Lb[1] = fmaf( x001, La101, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x002, La102, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x003, La103, Lb[1]);
	Lb[1] = fmaf(T(4.16666667e-02) * x004, La104, Lb[1]);
	Lb[1] = fmaf( x010, La110, Lb[1]);
	Lb[1] = fmaf( x011, La111, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x012, La112, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x013, La113, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x020, La120, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x021, La121, Lb[1]);
	Lb[1] = fmaf(T(2.50000000e-01) * x022, La122, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x030, La130, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x031, La131, Lb[1]);
	Lb[1] = fmaf(T(4.16666667e-02) * x040, La140, Lb[1]);
	Lb[1] = fmaf( x100, La200, Lb[1]);
	Lb[1] = fmaf( x101, La201, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x102, La202, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x103, La203, Lb[1]);
	Lb[1] = fmaf( x110, La210, Lb[1]);
	Lb[1] = fmaf( x111, La211, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x112, La212, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x120, La220, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x121, La221, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x130, La230, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x200, La300, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x201, La301, Lb[1]);
	Lb[1] = fmaf(T(2.50000000e-01) * x202, La302, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x210, La310, Lb[1]);
	Lb[1] = fmaf(T(5.00000000e-01) * x211, La311, Lb[1]);
	Lb[1] = fmaf(T(2.50000000e-01) * x220, La320, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x300, La400, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x301, La401, Lb[1]);
	Lb[1] = fmaf(T(1.66666667e-01) * x310, La410, Lb[1]);
	Lb[1] = fmaf(T(4.16666667e-02) * x400, La500, Lb[1]);
	return Lb;
/* FLOPS = 537*/
}
#ifdef EXPANSION_CU
__managed__ int Ldest[306] = { 21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,26,26,26,26,26,26,26,26,26,9,9,9,9,9,9,9,9,9,25,25,25,25,25,25,25,25,25,8,8,8,8,8,8,8,8,8,24,24,24,24,24,24,24,24,24,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,30,30,30,14,14,14,29,29,29,13,13,13,28,28,28,12,12,12,27,27,27,11,11,11,10,10,10};
__managed__ float factor[306] = { 1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00};
__managed__ int xsrc[306] = { 3,9,19,34,2,8,18,33,7,17,32,16,31,30,1,6,15,29,5,14,28,13,27,26,4,12,25,11,24,23,10,22,21,20,3,9,19,34,2,8,18,33,7,17,32,16,31,30,1,6,15,29,5,14,28,13,27,26,4,12,25,11,24,23,10,22,21,20,3,9,19,34,2,8,18,33,7,17,32,16,31,30,1,6,15,29,5,14,28,13,27,26,4,12,25,11,24,23,10,22,21,20,3,9,19,2,8,18,7,17,16,1,6,15,5,14,13,4,12,11,10,3,9,19,2,8,18,7,17,16,1,6,15,5,14,13,4,12,11,10,3,9,19,2,8,18,7,17,16,1,6,15,5,14,13,4,12,11,10,3,9,19,2,8,18,7,17,16,1,6,15,5,14,13,4,12,11,10,3,9,19,2,8,18,7,17,16,1,6,15,5,14,13,4,12,11,10,3,9,19,2,8,18,7,17,16,1,6,15,5,14,13,4,12,11,10,3,9,2,8,7,1,6,5,4,3,9,2,8,7,1,6,5,4,3,9,2,8,7,1,6,5,4,3,9,2,8,7,1,6,5,4,3,9,2,8,7,1,6,5,4,3,9,2,8,7,1,6,5,4,3,9,2,8,7,1,6,5,4,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1};
__managed__ int Lsrc[306] = { 9,19,34,55,8,18,33,54,17,32,53,31,52,51,6,15,29,49,14,28,48,27,47,46,12,25,44,24,43,42,22,40,39,37,8,18,33,54,7,17,32,53,16,31,52,30,51,50,5,14,28,48,13,27,47,26,46,45,11,24,43,23,42,41,21,39,38,36,6,15,29,49,5,14,28,48,13,27,47,26,46,45,4,12,25,44,11,24,43,23,42,41,10,22,40,21,39,38,20,37,36,35,19,34,55,18,33,54,32,53,52,15,29,49,28,48,47,25,44,43,40,18,33,54,17,32,53,31,52,51,14,28,48,27,47,46,24,43,42,39,17,32,53,16,31,52,30,51,50,13,27,47,26,46,45,23,42,41,38,15,29,49,14,28,48,27,47,46,12,25,44,24,43,42,22,40,39,37,14,28,48,13,27,47,26,46,45,11,24,43,23,42,41,21,39,38,36,12,25,44,11,24,43,23,42,41,10,22,40,21,39,38,20,37,36,35,32,53,31,52,51,27,47,46,42,31,52,30,51,50,26,46,45,41,28,48,27,47,46,24,43,42,39,27,47,26,46,45,23,42,41,38,25,44,24,43,42,22,40,39,37,24,43,23,42,41,21,39,38,36,22,40,21,39,38,20,37,36,35,52,51,46,51,50,45,47,46,42,46,45,41,43,42,39,42,41,38,40,39,37,39,38,36,37,36,35};
__managed__ float phi_factor[55] = { 1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,4.16666679e-02,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,2.50000000e-01,2.50000000e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,4.16666679e-02,4.16666679e-02,4.16666679e-02,8.33333377e-03};
__managed__ int phi_Lsrc[55] = { 3,9,19,34,55,2,8,18,33,54,7,17,32,53,16,31,52,30,51,50,1,6,15,29,49,5,14,28,48,13,27,47,26,46,45,4,12,25,44,11,24,43,23,42,41,10,22,40,21,39,38,20,37,36,35};
#ifdef __CUDA_ARCH__
template<class T>
__device__
tensor_trless_sym<T, 6> expansion_translate_cuda(const tensor_trless_sym<T, 6>& La, const array<T, NDIM>& X, bool do_phi) {
	const int tid = threadIdx.x;
	tensor_trless_sym<T, 6> Lb;
	tensor_sym<T, 6> Lc;
	Lb = 0.0f;
	for( int i = tid; i < LP; i += KICK_BLOCK_SIZE ) {
		Lb[i] = La[i];
	}
	tensor_sym<T,6> dx;
	dx[0] = T(1);
	dx[1] = X[0];
	dx[2] = X[1];
	dx[3] = X[2];
	dx[9]= dx[3] * dx[3];
	dx[8]= dx[2] * dx[3];
	dx[7]= dx[2] * dx[2];
	dx[6]= dx[1] * dx[3];
	dx[5]= dx[1] * dx[2];
	dx[4]= dx[1] * dx[1];
	dx[19]= dx[9] * dx[3];
	dx[18]= dx[8] * dx[3];
	dx[17]= dx[8] * dx[2];
	dx[16]= dx[7] * dx[2];
	dx[15]= dx[6] * dx[3];
	dx[14]= dx[5] * dx[3];
	dx[13]= dx[5] * dx[2];
	dx[12]= dx[6] * dx[1];
	dx[11]= dx[5] * dx[1];
	dx[10]= dx[4] * dx[1];
	dx[34]= dx[9] * dx[9];
	dx[33]= dx[8] * dx[9];
	dx[32]= dx[8] * dx[8];
	dx[31]= dx[8] * dx[7];
	dx[30]= dx[7] * dx[7];
	dx[29]= dx[6] * dx[9];
	dx[28]= dx[5] * dx[9];
	dx[27]= dx[5] * dx[8];
	dx[26]= dx[5] * dx[7];
	dx[25]= dx[6] * dx[6];
	dx[24]= dx[5] * dx[6];
	dx[23]= dx[5] * dx[5];
	dx[22]= dx[6] * dx[4];
	dx[21]= dx[5] * dx[4];
	dx[20]= dx[4] * dx[4];
	dx[55]= dx[19] * dx[9];
	dx[54]= dx[18] * dx[9];
	dx[53]= dx[17] * dx[9];
	dx[52]= dx[17] * dx[8];
	dx[51]= dx[17] * dx[7];
	dx[50]= dx[16] * dx[7];
	dx[49]= dx[15] * dx[9];
	dx[48]= dx[14] * dx[9];
	dx[47]= dx[14] * dx[8];
	dx[46]= dx[14] * dx[7];
	dx[45]= dx[13] * dx[7];
	dx[44]= dx[12] * dx[9];
	dx[43]= dx[14] * dx[6];
	dx[42]= dx[14] * dx[5];
	dx[41]= dx[11] * dx[7];
	dx[40]= dx[12] * dx[6];
	dx[39]= dx[14] * dx[4];
	dx[38]= dx[11] * dx[5];
	dx[37]= dx[12] * dx[4];
	dx[36]= dx[11] * dx[4];
	dx[35]= dx[10] * dx[4];
	Lc[0] =  (La[0]);
	Lc[3] =  (La[21]);
	Lc[9] =  (La[36]);
	Lc[19] = -(La[24]+(La[26]));
	Lc[34] =  (La[10]+fmaf(T(2),La[12],(La[14])));
	Lc[55] =  (La[31]+fmaf(T(2),La[33],(La[35])));
	Lc[2] =  (La[2]);
	Lc[8] =  (La[23]);
	Lc[18] = -(La[7]+(La[9]));
	Lc[33] = -(La[28]+(La[30]));
	Lc[54] =  (La[16]+fmaf(T(2),La[18],(La[20])));
	Lc[7] =  (La[5]);
	Lc[17] =  (La[26]);
	Lc[32] = -(La[12]+(La[14]));
	Lc[53] = -(La[33]+(La[35]));
	Lc[16] =  (La[9]);
	Lc[31] =  (La[30]);
	Lc[52] = -(La[18]+(La[20]));
	Lc[30] =  (La[14]);
	Lc[51] =  (La[35]);
	Lc[50] =  (La[20]);
	Lc[1] =  (La[1]);
	Lc[6] =  (La[22]);
	Lc[15] = -(La[6]+(La[8]));
	Lc[29] = -(La[27]+(La[29]));
	Lc[49] =  (La[15]+fmaf(T(2),La[17],(La[19])));
	Lc[5] =  (La[4]);
	Lc[14] =  (La[25]);
	Lc[28] = -(La[11]+(La[13]));
	Lc[48] = -(La[32]+(La[34]));
	Lc[13] =  (La[8]);
	Lc[27] =  (La[29]);
	Lc[47] = -(La[17]+(La[19]));
	Lc[26] =  (La[13]);
	Lc[46] =  (La[34]);
	Lc[45] =  (La[19]);
	Lc[4] =  (La[3]);
	Lc[12] =  (La[24]);
	Lc[25] = -(La[10]+(La[12]));
	Lc[44] = -(La[31]+(La[33]));
	Lc[11] =  (La[7]);
	Lc[24] =  (La[28]);
	Lc[43] = -(La[16]+(La[18]));
	Lc[23] =  (La[12]);
	Lc[42] =  (La[33]);
	Lc[41] =  (La[18]);
	Lc[10] =  (La[6]);
	Lc[22] =  (La[27]);
	Lc[40] = -(La[15]+(La[17]));
	Lc[21] =  (La[11]);
	Lc[39] =  (La[32]);
	Lc[38] =  (La[17]);
	Lc[20] =  (La[10]);
	Lc[37] =  (La[31]);
	Lc[36] =  (La[16]);
	Lc[35] =  (La[15]);
	for( int i = tid; i < 306; i+=KICK_BLOCK_SIZE) {
		Lb[Ldest[i]] = fmaf(factor[i] * dx[xsrc[i]], Lc[Lsrc[i]], Lb[Ldest[i]]);
	}
	if( do_phi ) {
		for( int i = tid; i < 55; i+=KICK_BLOCK_SIZE) {
			Lb[0] = fmaf(phi_factor[i] * dx[phi_Lsrc[i]], Lc[phi_Lsrc[i]], Lb[0]);
		}
	}
	for (int P = warpSize / 2; P >= 1; P /= 2) {
		for (int i = 0; i < LP; i++) {
			Lb[i] += __shfl_xor_sync(0xffffffff, Lb[i], P);
}
}
	return Lb;
/* FLOPS = 1318 + do_phi * 220*/
}
#endif
#endif
